{
  "version": 3,
  "sources": [
    "../../algo_freelance/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;;;;;;;;AAWK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASU;;AAAc;;AAAd;AAAP;AAEuB;AAAhB;AAAA;;AAAA;AAAP;AAGA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;;AAAA;AAAA;AACoC;;AAAZ;AAAxB;;AAAA;AAAA;AACA;AAAwB;;AAAxB;AACA;;AAAuB;;;;AAAvB;AApBH;AAAA;AAyBU;AAAA;AAAA;AAAA;AAAyB;;AAAzB;AAAP;AACO;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AAGO;;AAAqB;AAArB;AAAP;AACc;AAAA;;AAAA;AAAA;AAAA;AAAA;AACP;;AAAwB;;AAAxB;AAAP;AADc;AAEP;;AAAsB;AAAA;AAAA;AAAA;AAAA;AAAtB;AAAP;AAEA;AAAwB;;AAAxB;AAZH;AAAA;AAcA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAGU;AAAA;AAAA;AAAA;AAAyB;;AAAzB;AAAP;AACO;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AAKmB;;AAAZ;AAAA;;;AAA2B;AAAY;;AAAZ;AAA3B;;;;AAAP;AAGA;;AAAA;;AAAA;AACA;AAAwB;;AAAxB;AAbH;AAAA;;;;;AAkBU;AAAA;AAAA;AAAA;AAAyB;;AAAzB;AAAP;AACO;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AAIA;AACa;AAAA;AAAA;AAAA;AACF;AAAA;AAAA;AAAA;AAAA;;;;;;AAFX;;;AAGQ;;;AAHR;AAQkB;AAAA;;AAAA;AAAA;AAAA;;;AACA;AAAA;;AAAA;AAAA;AAAA;;;AAEH;AAGU;;;;;;;;;;;;;;;;;AAAV;;AAAA;AAEG;;;;;;;;;AAAV;;AAAA;AACI;;AACA;;;;;;;;;;;;AAHE;;;;;;;;;;;;;AAFD;;;AADH;;;AADK;;;;AAAA;;;AAAA;;;AAaf;AAGiB;;;;;;;AAHjB;;;;AAIQ;;;AAJR;AAOA;AAAwB;;;;;;;;;;AAAxB;AAvCH;AAAA;AA4CU;AAAA;AAAA;AAAA;AAAA;AAA+B;AAA/B;AAAP;AACO;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAA;;AAAA;AAAP;AAIA;AAEW;;AAAA;;AAAA;AAA6C;;AAA7C;;;;;AAFX;;;AAAA;;;AAAA;AAKA;AAAwB;;;;;;;;;;AAAxB;AAbH;AAAA;AAmBsB;AAAA;AAAA;AAAA;AACI;AAAA;AAAA;AAAA;AACL;AAAA;AAAA;AAAA;AACH;AAAA;AAAA;AAAA;AACD;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACC;AAAA;;AAAA;AAAA;AACQ;;AAAZ;AAXd;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 32"
    },
    "7": {
      "op": "bytecblock \"job_status\" \"client_address\" \"freelancer_address\" \"escrow_amount\" \"work_hash\" \"job_title\" \"created_at\" 0x0000000000000000 0x0000000000000001 0x0000000000000002"
    },
    "126": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "128": {
      "op": "bz main___algopy_default_create@15",
      "stack_out": []
    },
    "131": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "133": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "134": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "135": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "137": {
      "op": "assert",
      "stack_out": []
    },
    "138": {
      "op": "pushbytess 0x890632b1 0xe9892bef 0xe031da70 0x40c3067f 0x31f26a9b 0xd0e63f01 // method \"initialize(address,address,uint64,string)void\", method \"fund()void\", method \"submit_work(string)void\", method \"approve_work()void\", method \"cancel()void\", method \"get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)\"",
      "defined_out": [
        "Method(approve_work()void)",
        "Method(cancel()void)",
        "Method(fund()void)",
        "Method(get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64))",
        "Method(initialize(address,address,uint64,string)void)",
        "Method(submit_work(string)void)"
      ],
      "stack_out": [
        "Method(initialize(address,address,uint64,string)void)",
        "Method(fund()void)",
        "Method(submit_work(string)void)",
        "Method(approve_work()void)",
        "Method(cancel()void)",
        "Method(get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64))"
      ]
    },
    "170": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(approve_work()void)",
        "Method(cancel()void)",
        "Method(fund()void)",
        "Method(get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64))",
        "Method(initialize(address,address,uint64,string)void)",
        "Method(submit_work(string)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(initialize(address,address,uint64,string)void)",
        "Method(fund()void)",
        "Method(submit_work(string)void)",
        "Method(approve_work()void)",
        "Method(cancel()void)",
        "Method(get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64))",
        "tmp%6#0"
      ]
    },
    "173": {
      "op": "match initialize fund submit_work approve_work cancel get_job_details",
      "stack_out": []
    },
    "187": {
      "op": "err"
    },
    "188": {
      "block": "main___algopy_default_create@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "190": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "191": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "193": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "194": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "195": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "196": {
      "subroutine": "smart_contracts.algo_freelance.contract.AlgoFreelance.initialize[routing]",
      "params": {},
      "block": "initialize",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "client_address#0"
      ],
      "stack_out": [
        "client_address#0"
      ]
    },
    "199": {
      "op": "dup",
      "defined_out": [
        "client_address#0",
        "client_address#0 (copy)"
      ],
      "stack_out": [
        "client_address#0",
        "client_address#0 (copy)"
      ]
    },
    "200": {
      "op": "len",
      "defined_out": [
        "client_address#0",
        "len%0#0"
      ],
      "stack_out": [
        "client_address#0",
        "len%0#0"
      ]
    },
    "201": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "client_address#0",
        "len%0#0"
      ],
      "stack_out": [
        "client_address#0",
        "len%0#0",
        "32"
      ]
    },
    "202": {
      "op": "==",
      "defined_out": [
        "client_address#0",
        "eq%0#0"
      ],
      "stack_out": [
        "client_address#0",
        "eq%0#0"
      ]
    },
    "203": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "client_address#0"
      ]
    },
    "204": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "client_address#0",
        "freelancer_address#0"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0"
      ]
    },
    "207": {
      "op": "dup",
      "defined_out": [
        "client_address#0",
        "freelancer_address#0",
        "freelancer_address#0 (copy)"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "freelancer_address#0 (copy)"
      ]
    },
    "208": {
      "op": "len",
      "defined_out": [
        "client_address#0",
        "freelancer_address#0",
        "len%1#0"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "len%1#0"
      ]
    },
    "209": {
      "op": "intc_3 // 32",
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "len%1#0",
        "32"
      ]
    },
    "210": {
      "op": "==",
      "defined_out": [
        "client_address#0",
        "eq%1#0",
        "freelancer_address#0"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "eq%1#0"
      ]
    },
    "211": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "client_address#0",
        "freelancer_address#0"
      ]
    },
    "212": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "client_address#0",
        "escrow_amount#0",
        "freelancer_address#0"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0"
      ]
    },
    "215": {
      "op": "dup",
      "defined_out": [
        "client_address#0",
        "escrow_amount#0",
        "escrow_amount#0 (copy)",
        "freelancer_address#0"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "escrow_amount#0 (copy)"
      ]
    },
    "216": {
      "op": "len",
      "defined_out": [
        "client_address#0",
        "escrow_amount#0",
        "freelancer_address#0",
        "len%2#0"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "len%2#0"
      ]
    },
    "217": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "client_address#0",
        "escrow_amount#0",
        "freelancer_address#0",
        "len%2#0"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "len%2#0",
        "8"
      ]
    },
    "219": {
      "op": "==",
      "defined_out": [
        "client_address#0",
        "eq%2#0",
        "escrow_amount#0",
        "freelancer_address#0"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "eq%2#0"
      ]
    },
    "220": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0"
      ]
    },
    "221": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "client_address#0",
        "escrow_amount#0",
        "freelancer_address#0",
        "job_title#0"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0"
      ]
    },
    "224": {
      "op": "dup",
      "defined_out": [
        "client_address#0",
        "escrow_amount#0",
        "freelancer_address#0",
        "job_title#0",
        "job_title#0 (copy)"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0",
        "job_title#0 (copy)"
      ]
    },
    "225": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "client_address#0",
        "escrow_amount#0",
        "freelancer_address#0",
        "job_title#0",
        "job_title#0 (copy)"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0",
        "job_title#0 (copy)",
        "0"
      ]
    },
    "226": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "client_address#0",
        "escrow_amount#0",
        "freelancer_address#0",
        "job_title#0"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0",
        "aggregate%array_length%0#0"
      ]
    },
    "227": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "client_address#0",
        "escrow_amount#0",
        "freelancer_address#0",
        "job_title#0"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "228": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "client_address#0",
        "escrow_amount#0",
        "freelancer_address#0",
        "job_title#0"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0",
        "add%0#0"
      ]
    },
    "229": {
      "op": "dig 1",
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0",
        "add%0#0",
        "job_title#0 (copy)"
      ]
    },
    "231": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "client_address#0",
        "escrow_amount#0",
        "freelancer_address#0",
        "job_title#0",
        "len%3#0"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0",
        "add%0#0",
        "len%3#0"
      ]
    },
    "232": {
      "op": "==",
      "defined_out": [
        "client_address#0",
        "eq%3#0",
        "escrow_amount#0",
        "freelancer_address#0",
        "job_title#0"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0",
        "eq%3#0"
      ]
    },
    "233": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0"
      ]
    },
    "234": {
      "op": "txn Sender",
      "defined_out": [
        "client_address#0",
        "escrow_amount#0",
        "freelancer_address#0",
        "job_title#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0",
        "tmp%0#1"
      ]
    },
    "236": {
      "op": "global CreatorAddress",
      "defined_out": [
        "client_address#0",
        "escrow_amount#0",
        "freelancer_address#0",
        "job_title#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "238": {
      "op": "==",
      "defined_out": [
        "client_address#0",
        "escrow_amount#0",
        "freelancer_address#0",
        "job_title#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0",
        "tmp%2#1"
      ]
    },
    "239": {
      "error": "Only the creator can initialize the contract",
      "op": "assert // Only the creator can initialize the contract",
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0"
      ]
    },
    "240": {
      "op": "intc_0 // 0",
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0",
        "0"
      ]
    },
    "241": {
      "op": "itob",
      "defined_out": [
        "client_address#0",
        "escrow_amount#0",
        "freelancer_address#0",
        "job_title#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0",
        "tmp%3#1"
      ]
    },
    "242": {
      "op": "dig 2",
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0",
        "tmp%3#1",
        "escrow_amount#0 (copy)"
      ]
    },
    "244": {
      "op": "b<",
      "defined_out": [
        "client_address#0",
        "escrow_amount#0",
        "freelancer_address#0",
        "job_title#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0",
        "tmp%4#0"
      ]
    },
    "245": {
      "error": "Escrow amount must be greater than 0",
      "op": "assert // Escrow amount must be greater than 0",
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0"
      ]
    },
    "246": {
      "op": "bytec_1 // \"client_address\"",
      "defined_out": [
        "\"client_address\"",
        "client_address#0",
        "escrow_amount#0",
        "freelancer_address#0",
        "job_title#0"
      ],
      "stack_out": [
        "client_address#0",
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0",
        "\"client_address\""
      ]
    },
    "247": {
      "op": "uncover 4",
      "stack_out": [
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0",
        "\"client_address\"",
        "client_address#0"
      ]
    },
    "249": {
      "op": "app_global_put",
      "stack_out": [
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0"
      ]
    },
    "250": {
      "op": "bytec_2 // \"freelancer_address\"",
      "defined_out": [
        "\"freelancer_address\"",
        "escrow_amount#0",
        "freelancer_address#0",
        "job_title#0"
      ],
      "stack_out": [
        "freelancer_address#0",
        "escrow_amount#0",
        "job_title#0",
        "\"freelancer_address\""
      ]
    },
    "251": {
      "op": "uncover 3",
      "stack_out": [
        "escrow_amount#0",
        "job_title#0",
        "\"freelancer_address\"",
        "freelancer_address#0"
      ]
    },
    "253": {
      "op": "app_global_put",
      "stack_out": [
        "escrow_amount#0",
        "job_title#0"
      ]
    },
    "254": {
      "op": "bytec_3 // \"escrow_amount\"",
      "defined_out": [
        "\"escrow_amount\"",
        "escrow_amount#0",
        "job_title#0"
      ],
      "stack_out": [
        "escrow_amount#0",
        "job_title#0",
        "\"escrow_amount\""
      ]
    },
    "255": {
      "op": "uncover 2",
      "stack_out": [
        "job_title#0",
        "\"escrow_amount\"",
        "escrow_amount#0"
      ]
    },
    "257": {
      "op": "app_global_put",
      "stack_out": [
        "job_title#0"
      ]
    },
    "258": {
      "op": "bytec 5 // \"job_title\"",
      "defined_out": [
        "\"job_title\"",
        "job_title#0"
      ],
      "stack_out": [
        "job_title#0",
        "\"job_title\""
      ]
    },
    "260": {
      "op": "swap",
      "stack_out": [
        "\"job_title\"",
        "job_title#0"
      ]
    },
    "261": {
      "op": "app_global_put",
      "stack_out": []
    },
    "262": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "264": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "265": {
      "op": "bytec 6 // \"created_at\"",
      "defined_out": [
        "\"created_at\"",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"created_at\""
      ]
    },
    "267": {
      "op": "swap",
      "stack_out": [
        "\"created_at\"",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "268": {
      "op": "app_global_put",
      "stack_out": []
    },
    "269": {
      "op": "bytec_0 // \"job_status\"",
      "defined_out": [
        "\"job_status\""
      ],
      "stack_out": [
        "\"job_status\""
      ]
    },
    "270": {
      "op": "bytec 7 // 0x0000000000000000",
      "defined_out": [
        "\"job_status\"",
        "0x0000000000000000"
      ],
      "stack_out": [
        "\"job_status\"",
        "0x0000000000000000"
      ]
    },
    "272": {
      "op": "app_global_put",
      "stack_out": []
    },
    "273": {
      "op": "bytec 4 // \"work_hash\"",
      "defined_out": [
        "\"work_hash\""
      ],
      "stack_out": [
        "\"work_hash\""
      ]
    },
    "275": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "\"work_hash\"",
        "0x0000"
      ],
      "stack_out": [
        "\"work_hash\"",
        "0x0000"
      ]
    },
    "279": {
      "op": "app_global_put",
      "stack_out": []
    },
    "280": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "281": {
      "op": "return",
      "stack_out": []
    },
    "282": {
      "subroutine": "smart_contracts.algo_freelance.contract.AlgoFreelance.fund[routing]",
      "params": {},
      "block": "fund",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "283": {
      "op": "bytec_0 // \"job_status\"",
      "defined_out": [
        "\"job_status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"job_status\""
      ]
    },
    "284": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "285": {
      "error": "check self.job_status exists",
      "op": "assert // check self.job_status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "286": {
      "op": "bytec 7 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x0000000000000000"
      ]
    },
    "288": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "289": {
      "error": "Job not in Created status",
      "op": "assert // Job not in Created status",
      "stack_out": []
    },
    "290": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "292": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "293": {
      "op": "bytec_1 // \"client_address\"",
      "defined_out": [
        "\"client_address\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"client_address\""
      ]
    },
    "294": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "295": {
      "error": "check self.client_address exists",
      "op": "assert // check self.client_address exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "296": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "297": {
      "error": "Only client can fund",
      "op": "assert // Only client can fund",
      "stack_out": []
    },
    "298": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "300": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "2"
      ]
    },
    "301": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "302": {
      "error": "Must be grouped with a payment transaction",
      "op": "assert // Must be grouped with a payment transaction",
      "stack_out": []
    },
    "303": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "304": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_type%0#0"
      ]
    },
    "306": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "307": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_type_matches%0#0"
      ]
    },
    "308": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": []
    },
    "309": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "310": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "312": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "314": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "315": {
      "error": "Payment must be to the contract",
      "op": "assert // Payment must be to the contract",
      "stack_out": []
    },
    "316": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "317": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "319": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "320": {
      "op": "bytec_3 // \"escrow_amount\"",
      "defined_out": [
        "\"escrow_amount\"",
        "0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0",
        "\"escrow_amount\""
      ]
    },
    "321": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "322": {
      "error": "check self.escrow_amount exists",
      "op": "assert // check self.escrow_amount exists",
      "stack_out": [
        "tmp%8#0",
        "maybe_value%2#0"
      ]
    },
    "323": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "324": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "325": {
      "error": "Payment amount must match escrow amount",
      "op": "assert // Payment amount must match escrow amount",
      "stack_out": []
    },
    "326": {
      "op": "bytec_0 // \"job_status\"",
      "stack_out": [
        "\"job_status\""
      ]
    },
    "327": {
      "op": "bytec 8 // 0x0000000000000001",
      "defined_out": [
        "\"job_status\"",
        "0x0000000000000001"
      ],
      "stack_out": [
        "\"job_status\"",
        "0x0000000000000001"
      ]
    },
    "329": {
      "op": "app_global_put",
      "stack_out": []
    },
    "330": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "331": {
      "op": "return",
      "stack_out": []
    },
    "332": {
      "subroutine": "smart_contracts.algo_freelance.contract.AlgoFreelance.submit_work[routing]",
      "params": {},
      "block": "submit_work",
      "stack_in": [],
      "op": "txna ApplicationArgs 1"
    },
    "335": {
      "op": "dupn 2",
      "defined_out": [
        "ipfs_hash#0",
        "ipfs_hash#0 (copy)"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "ipfs_hash#0",
        "ipfs_hash#0 (copy)"
      ]
    },
    "337": {
      "op": "intc_0 // 0",
      "stack_out": [
        "ipfs_hash#0",
        "ipfs_hash#0",
        "ipfs_hash#0 (copy)",
        "0"
      ]
    },
    "338": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "ipfs_hash#0",
        "aggregate%array_length%0#0"
      ]
    },
    "339": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "ipfs_hash#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "340": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "ipfs_hash#0",
        "add%0#0"
      ]
    },
    "341": {
      "op": "swap",
      "stack_out": [
        "ipfs_hash#0",
        "add%0#0",
        "ipfs_hash#0"
      ]
    },
    "342": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "hash_len#0",
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "add%0#0",
        "hash_len#0"
      ]
    },
    "343": {
      "op": "dup",
      "stack_out": [
        "ipfs_hash#0",
        "add%0#0",
        "hash_len#0",
        "hash_len#0"
      ]
    },
    "344": {
      "op": "cover 2",
      "defined_out": [
        "add%0#0",
        "hash_len#0",
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "add%0#0",
        "hash_len#0"
      ]
    },
    "346": {
      "op": "dup",
      "defined_out": [
        "add%0#0",
        "hash_len#0",
        "hash_len#0 (copy)",
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "add%0#0",
        "hash_len#0",
        "hash_len#0 (copy)"
      ]
    },
    "347": {
      "op": "uncover 2",
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0",
        "hash_len#0 (copy)",
        "add%0#0"
      ]
    },
    "349": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "hash_len#0",
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0",
        "eq%0#0"
      ]
    },
    "350": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0"
      ]
    },
    "351": {
      "op": "intc_0 // 0",
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0",
        "0"
      ]
    },
    "352": {
      "op": "bytec_0 // \"job_status\"",
      "defined_out": [
        "\"job_status\"",
        "0",
        "hash_len#0",
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0",
        "0",
        "\"job_status\""
      ]
    },
    "353": {
      "op": "app_global_get_ex",
      "defined_out": [
        "hash_len#0",
        "ipfs_hash#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "354": {
      "error": "check self.job_status exists",
      "op": "assert // check self.job_status exists",
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0",
        "maybe_value%0#0"
      ]
    },
    "355": {
      "op": "bytec 8 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "hash_len#0",
        "ipfs_hash#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0",
        "maybe_value%0#0",
        "0x0000000000000001"
      ]
    },
    "357": {
      "op": "b==",
      "defined_out": [
        "hash_len#0",
        "ipfs_hash#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0",
        "tmp%0#1"
      ]
    },
    "358": {
      "error": "Job not in Funded status",
      "op": "assert // Job not in Funded status",
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0"
      ]
    },
    "359": {
      "op": "txn Sender",
      "defined_out": [
        "hash_len#0",
        "ipfs_hash#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0",
        "tmp%1#0"
      ]
    },
    "361": {
      "op": "intc_0 // 0",
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0",
        "tmp%1#0",
        "0"
      ]
    },
    "362": {
      "op": "bytec_2 // \"freelancer_address\"",
      "defined_out": [
        "\"freelancer_address\"",
        "0",
        "hash_len#0",
        "ipfs_hash#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0",
        "tmp%1#0",
        "0",
        "\"freelancer_address\""
      ]
    },
    "363": {
      "op": "app_global_get_ex",
      "defined_out": [
        "hash_len#0",
        "ipfs_hash#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "364": {
      "error": "check self.freelancer_address exists",
      "op": "assert // check self.freelancer_address exists",
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "365": {
      "op": "==",
      "defined_out": [
        "hash_len#0",
        "ipfs_hash#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0",
        "tmp%2#0"
      ]
    },
    "366": {
      "error": "Only freelancer can submit work",
      "op": "assert // Only freelancer can submit work",
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0"
      ]
    },
    "367": {
      "op": "pushint 46 // 46",
      "defined_out": [
        "46",
        "hash_len#0",
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0",
        "46"
      ]
    },
    "369": {
      "op": ">=",
      "defined_out": [
        "hash_len#0",
        "ipfs_hash#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "tmp%4#0"
      ]
    },
    "370": {
      "op": "bz submit_work_bool_false@4",
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0"
      ]
    },
    "373": {
      "op": "dup",
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0"
      ]
    },
    "374": {
      "op": "pushint 59 // 59",
      "defined_out": [
        "59",
        "hash_len#0",
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "hash_len#0",
        "59"
      ]
    },
    "376": {
      "op": "<=",
      "defined_out": [
        "hash_len#0",
        "ipfs_hash#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "tmp%5#0"
      ]
    },
    "377": {
      "op": "bz submit_work_bool_false@4",
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0"
      ]
    },
    "380": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "hash_len#0",
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "and_result%0#0"
      ]
    },
    "381": {
      "error": "Invalid IPFS hash length",
      "block": "submit_work_bool_merge@5",
      "stack_in": [
        "ipfs_hash#0",
        "hash_len#0",
        "and_result%0#0"
      ],
      "op": "assert // Invalid IPFS hash length",
      "defined_out": [],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0"
      ]
    },
    "382": {
      "op": "bytec 4 // \"work_hash\"",
      "defined_out": [
        "\"work_hash\""
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "\"work_hash\""
      ]
    },
    "384": {
      "op": "dig 2",
      "defined_out": [
        "\"work_hash\"",
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "\"work_hash\"",
        "ipfs_hash#0"
      ]
    },
    "386": {
      "op": "app_global_put",
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0"
      ]
    },
    "387": {
      "op": "bytec_0 // \"job_status\"",
      "defined_out": [
        "\"job_status\"",
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "\"job_status\""
      ]
    },
    "388": {
      "op": "bytec 9 // 0x0000000000000002",
      "defined_out": [
        "\"job_status\"",
        "0x0000000000000002",
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "\"job_status\"",
        "0x0000000000000002"
      ]
    },
    "390": {
      "op": "app_global_put",
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0"
      ]
    },
    "391": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "1"
      ]
    },
    "392": {
      "op": "return",
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0"
      ]
    },
    "393": {
      "block": "submit_work_bool_false@4",
      "stack_in": [
        "ipfs_hash#0",
        "hash_len#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "hash_len#0",
        "and_result%0#0"
      ]
    },
    "394": {
      "op": "b submit_work_bool_merge@5"
    },
    "397": {
      "subroutine": "smart_contracts.algo_freelance.contract.AlgoFreelance.approve_work[routing]",
      "params": {},
      "block": "approve_work",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "398": {
      "op": "bytec_0 // \"job_status\"",
      "defined_out": [
        "\"job_status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"job_status\""
      ]
    },
    "399": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "400": {
      "error": "check self.job_status exists",
      "op": "assert // check self.job_status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "401": {
      "op": "bytec 9 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x0000000000000002"
      ]
    },
    "403": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "404": {
      "error": "Job not in Submitted status",
      "op": "assert // Job not in Submitted status",
      "stack_out": []
    },
    "405": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "407": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "408": {
      "op": "bytec_1 // \"client_address\"",
      "defined_out": [
        "\"client_address\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"client_address\""
      ]
    },
    "409": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "410": {
      "error": "check self.client_address exists",
      "op": "assert // check self.client_address exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "411": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "412": {
      "error": "Only client can approve work",
      "op": "assert // Only client can approve work",
      "stack_out": []
    },
    "413": {
      "op": "itxn_begin"
    },
    "414": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "415": {
      "op": "bytec_2 // \"freelancer_address\"",
      "defined_out": [
        "\"freelancer_address\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"freelancer_address\""
      ]
    },
    "416": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "417": {
      "error": "check self.freelancer_address exists",
      "op": "assert // check self.freelancer_address exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "418": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "419": {
      "op": "bytec_3 // \"escrow_amount\"",
      "defined_out": [
        "\"escrow_amount\"",
        "0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "0",
        "\"escrow_amount\""
      ]
    },
    "420": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "421": {
      "error": "check self.escrow_amount exists",
      "op": "assert // check self.escrow_amount exists",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "422": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "423": {
      "op": "itxn_field Amount",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "425": {
      "op": "dup",
      "defined_out": [
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ]
    },
    "426": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "428": {
      "op": "intc_1 // pay",
      "defined_out": [
        "maybe_value%2#0",
        "pay"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "pay"
      ]
    },
    "429": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "431": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "432": {
      "op": "itxn_field Fee",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "434": {
      "op": "itxn_submit"
    },
    "435": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "436": {
      "op": "bytec 5 // \"job_title\"",
      "defined_out": [
        "\"job_title\"",
        "0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "0",
        "\"job_title\""
      ]
    },
    "438": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%2#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "439": {
      "error": "check self.job_title exists",
      "op": "assert // check self.job_title exists",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%4#0"
      ]
    },
    "440": {
      "op": "extract 2 0",
      "defined_out": [
        "job_title_bytes#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "job_title_bytes#0"
      ]
    },
    "443": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "job_title_bytes#0",
        "0"
      ]
    },
    "444": {
      "op": "bytec 4 // \"work_hash\"",
      "defined_out": [
        "\"work_hash\"",
        "0",
        "job_title_bytes#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "job_title_bytes#0",
        "0",
        "\"work_hash\""
      ]
    },
    "446": {
      "op": "app_global_get_ex",
      "defined_out": [
        "job_title_bytes#0",
        "maybe_exists%5#0",
        "maybe_value%2#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "job_title_bytes#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "447": {
      "error": "check self.work_hash exists",
      "op": "assert // check self.work_hash exists",
      "stack_out": [
        "maybe_value%2#0",
        "job_title_bytes#0",
        "maybe_value%5#0"
      ]
    },
    "448": {
      "op": "extract 2 0",
      "defined_out": [
        "job_title_bytes#0",
        "maybe_value%2#0",
        "work_hash_bytes#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "job_title_bytes#0",
        "work_hash_bytes#0"
      ]
    },
    "451": {
      "op": "itxn_begin"
    },
    "452": {
      "op": "pushbytes 0x416c676f467265656c616e63653a20",
      "defined_out": [
        "0x416c676f467265656c616e63653a20",
        "job_title_bytes#0",
        "maybe_value%2#0",
        "work_hash_bytes#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "job_title_bytes#0",
        "work_hash_bytes#0",
        "0x416c676f467265656c616e63653a20"
      ]
    },
    "469": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%2#0",
        "work_hash_bytes#0",
        "0x416c676f467265656c616e63653a20",
        "job_title_bytes#0"
      ]
    },
    "471": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "maybe_value%2#0",
        "work_hash_bytes#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "work_hash_bytes#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "472": {
      "op": "pushbytes 0x697066733a2f2f",
      "defined_out": [
        "0x697066733a2f2f",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "maybe_value%2#0",
        "work_hash_bytes#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "work_hash_bytes#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "0x697066733a2f2f"
      ]
    },
    "481": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "0x697066733a2f2f",
        "work_hash_bytes#0"
      ]
    },
    "483": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0"
      ]
    },
    "484": {
      "op": "global ZeroAddress",
      "defined_out": [
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "486": {
      "op": "dupn 3",
      "defined_out": [
        "inner_txn_params%1%%param_ConfigAssetClawback_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetClawback_idx_0#0"
      ]
    },
    "488": {
      "op": "itxn_field ConfigAssetClawback",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetFreeze_idx_0#0"
      ]
    },
    "490": {
      "op": "itxn_field ConfigAssetFreeze",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetReserve_idx_0#0"
      ]
    },
    "492": {
      "op": "itxn_field ConfigAssetReserve",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "494": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0"
      ]
    },
    "496": {
      "op": "itxn_field ConfigAssetURL",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "498": {
      "op": "pushbytes 0x504f5743455254",
      "defined_out": [
        "0x504f5743455254",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "0x504f5743455254"
      ]
    },
    "507": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "509": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "511": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "512": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "514": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "1"
      ]
    },
    "515": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "517": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "acfg"
      ]
    },
    "519": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "521": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "522": {
      "op": "itxn_field Fee",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "524": {
      "op": "itxn_submit"
    },
    "525": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "maybe_value%2#0",
        "nft_creation.CreatedAssetID#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "nft_creation.CreatedAssetID#0"
      ]
    },
    "527": {
      "op": "itxn_begin"
    },
    "528": {
      "op": "intc_1 // 1",
      "stack_out": [
        "maybe_value%2#0",
        "nft_creation.CreatedAssetID#0",
        "1"
      ]
    },
    "529": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%2#0",
        "nft_creation.CreatedAssetID#0"
      ]
    },
    "531": {
      "op": "itxn_field XferAsset"
    },
    "533": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "535": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "537": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "539": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "540": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "542": {
      "op": "itxn_submit"
    },
    "543": {
      "op": "bytec_0 // \"job_status\"",
      "stack_out": [
        "\"job_status\""
      ]
    },
    "544": {
      "op": "pushbytes 0x0000000000000003",
      "defined_out": [
        "\"job_status\"",
        "0x0000000000000003"
      ],
      "stack_out": [
        "\"job_status\"",
        "0x0000000000000003"
      ]
    },
    "554": {
      "op": "app_global_put",
      "stack_out": []
    },
    "555": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "556": {
      "op": "return",
      "stack_out": []
    },
    "557": {
      "subroutine": "smart_contracts.algo_freelance.contract.AlgoFreelance.cancel[routing]",
      "params": {},
      "block": "cancel",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "558": {
      "op": "bytec_0 // \"job_status\"",
      "defined_out": [
        "\"job_status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"job_status\""
      ]
    },
    "559": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "560": {
      "error": "check self.job_status exists",
      "op": "assert // check self.job_status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "561": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "562": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "563": {
      "op": "<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "564": {
      "error": "Job cannot be canceled after work has been submitted",
      "op": "assert // Job cannot be canceled after work has been submitted",
      "stack_out": []
    },
    "565": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "567": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "568": {
      "op": "bytec_1 // \"client_address\"",
      "defined_out": [
        "\"client_address\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"client_address\""
      ]
    },
    "569": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "570": {
      "error": "check self.client_address exists",
      "op": "assert // check self.client_address exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "571": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ]
    },
    "572": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "574": {
      "op": "==",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%3#0"
      ]
    },
    "575": {
      "error": "Only client can cancel",
      "op": "assert // Only client can cancel",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "576": {
      "op": "itxn_begin"
    },
    "577": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%4#0"
      ]
    },
    "579": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "maybe_value%1#0",
        "value%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "581": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "maybe_value%1#0",
        "value%0#0"
      ]
    },
    "582": {
      "op": "global MinBalance",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%5#0",
        "value%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "value%0#0",
        "tmp%5#0"
      ]
    },
    "584": {
      "op": "-",
      "defined_out": [
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "585": {
      "op": "itxn_field Amount",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "587": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "589": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "590": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "592": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "593": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "595": {
      "op": "itxn_submit"
    },
    "596": {
      "op": "bytec_0 // \"job_status\"",
      "stack_out": [
        "\"job_status\""
      ]
    },
    "597": {
      "op": "pushbytes 0x0000000000000004",
      "defined_out": [
        "\"job_status\"",
        "0x0000000000000004"
      ],
      "stack_out": [
        "\"job_status\"",
        "0x0000000000000004"
      ]
    },
    "607": {
      "op": "app_global_put",
      "stack_out": []
    },
    "608": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "609": {
      "op": "return",
      "stack_out": []
    },
    "610": {
      "subroutine": "smart_contracts.algo_freelance.contract.AlgoFreelance.get_job_details[routing]",
      "params": {},
      "block": "get_job_details",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "611": {
      "op": "bytec_1 // \"client_address\"",
      "defined_out": [
        "\"client_address\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"client_address\""
      ]
    },
    "612": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "613": {
      "error": "check self.client_address exists",
      "op": "assert // check self.client_address exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "614": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "615": {
      "op": "bytec_2 // \"freelancer_address\"",
      "defined_out": [
        "\"freelancer_address\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"freelancer_address\""
      ]
    },
    "616": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "617": {
      "error": "check self.freelancer_address exists",
      "op": "assert // check self.freelancer_address exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "618": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "619": {
      "op": "bytec_3 // \"escrow_amount\"",
      "defined_out": [
        "\"escrow_amount\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"escrow_amount\""
      ]
    },
    "620": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "621": {
      "error": "check self.escrow_amount exists",
      "op": "assert // check self.escrow_amount exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "622": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "623": {
      "op": "bytec_0 // \"job_status\"",
      "defined_out": [
        "\"job_status\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"job_status\""
      ]
    },
    "624": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "625": {
      "error": "check self.job_status exists",
      "op": "assert // check self.job_status exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "626": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "627": {
      "op": "bytec 4 // \"work_hash\"",
      "defined_out": [
        "\"work_hash\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"work_hash\""
      ]
    },
    "629": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "630": {
      "error": "check self.work_hash exists",
      "op": "assert // check self.work_hash exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "631": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "632": {
      "op": "bytec 5 // \"job_title\"",
      "defined_out": [
        "\"job_title\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0",
        "\"job_title\""
      ]
    },
    "634": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "635": {
      "error": "check self.job_title exists",
      "op": "assert // check self.job_title exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "636": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0"
      ]
    },
    "637": {
      "op": "bytec 6 // \"created_at\"",
      "defined_out": [
        "\"created_at\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0",
        "\"created_at\""
      ]
    },
    "639": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "640": {
      "error": "check self.created_at exists",
      "op": "assert // check self.created_at exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ]
    },
    "641": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#1"
      ]
    },
    "643": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "644": {
      "op": "uncover 7",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%0#0"
      ]
    },
    "646": {
      "op": "uncover 7",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "648": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%head%1#0"
      ]
    },
    "649": {
      "op": "uncover 6",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%head%1#0",
        "maybe_value%2#0"
      ]
    },
    "651": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%head%2#0"
      ]
    },
    "652": {
      "op": "uncover 5",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%head%2#0",
        "maybe_value%3#0"
      ]
    },
    "654": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%3#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%head%3#0"
      ]
    },
    "655": {
      "op": "pushbytes 0x0064",
      "defined_out": [
        "0x0064",
        "aggregate%head%3#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%head%3#0",
        "0x0064"
      ]
    },
    "659": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%head%4#0"
      ]
    },
    "660": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%head%4#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_value%4#0 (copy)",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%head%4#0",
        "maybe_value%4#0 (copy)"
      ]
    },
    "662": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "aggregate%head%4#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%head%4#0",
        "aggregate%data_length%0#0"
      ]
    },
    "663": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "aggregate%data_length%0#0",
        "aggregate%head%4#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%head%4#0",
        "aggregate%data_length%0#0",
        "100"
      ]
    },
    "665": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%4#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%head%4#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "666": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%head%4#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%head%4#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "667": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%4#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%head%4#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "670": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%head%5#0"
      ]
    },
    "671": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%head%5#0",
        "maybe_value%6#0"
      ]
    },
    "673": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%head%6#0"
      ]
    },
    "674": {
      "op": "swap",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "675": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%7#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%head%7#0"
      ]
    },
    "676": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%5#0",
        "aggregate%head%7#0",
        "maybe_value%4#0"
      ]
    },
    "678": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "aggregate%concat%0#0"
      ]
    },
    "679": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%0#0",
        "maybe_value%5#0"
      ]
    },
    "680": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0"
      ]
    },
    "681": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "0x151f7c75"
      ]
    },
    "687": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ]
    },
    "688": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "689": {
      "op": "log",
      "stack_out": []
    },
    "690": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "691": {
      "op": "return",
      "stack_out": []
    }
  }
}