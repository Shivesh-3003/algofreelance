{
  "version": 3,
  "sources": [
    "../../algo_freelance/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;AAsHK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAzCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AA/CL;;;AA+CK;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAXL;;;AAAA;;;AAAA;;;AAAA;;;AAWK;;;AAAA;;AAXL;;AAAA;;;;;;;;;AAWA;;;AASe;;AAAc;;AAAd;AAAP;AAEuB;AAAhB;AAAA;;AAAA;AAAP;AAGA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACoC;;AAAZ;AAAxB;;AAAA;AAAA;AACA;AAAwB;;AAAxB;AACA;;AAAuB;;;;AAAvB;;AAKO;AAAA;AAAA;AAAA;AAAyB;;AAAzB;AAAP;AACO;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AAGO;;AAAqB;AAArB;AAAP;AACc;AAAA;;AAAA;AAAA;AAAA;AAAA;AACP;;AAAwB;;AAAxB;AAAP;AADc;AAEP;;AAAsB;AAAA;AAAA;AAAA;AAAA;AAAtB;AAAP;AAEA;AAAwB;;AAAxB;;AAER;;;AAGe;AAAA;AAAA;AAAA;AAAyB;;AAAzB;AAAP;AACO;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AAIA;;AAAW;AAAX;AACmB;;AAAZ;AAAA;;;AAA2B;;AAAY;;AAAZ;AAA3B;;;;AAAP;AAGA;;AAAA;;AAAA;AACA;AAAwB;;AAAxB;;;;;;AAKO;AAAA;AAAA;AAAA;AAAyB;;AAAzB;AAAP;AACO;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AAIA;AACa;AAAA;AAAA;AAAA;AACF;AAAA;AAAA;AAAA;AAAA;;;;;;AAFX;;;AAGQ;;;AAHR;AAQkB;AAAA;;AAAA;AAAA;AAAA;;;AACA;AAAA;;AAAA;AAAA;AAAA;;;AAEH;AAGU;;;;;;;;;;;;;;;;;AAAV;;AAAA;AAEG;;;;;;;;;AAAV;;AAAA;AACI;;AACA;;;;;;;;;;;;AAHE;;;;;;;;;;;;;AAFD;;;AADH;;;AADK;;;;AAAA;;;AAAA;;;AAaf;AAGiB;;;;;;;AAHjB;;;;AAIQ;;;AAJR;AAOA;AAAwB;;;;;;;;;;AAAxB;;AAKO;AAAA;AAAA;AAAA;AAAA;AAA+B;AAA/B;AAAP;AACO;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAA;;AAAA;AAAP;AAIA;AAEW;;AAAA;;AAAA;AAA6C;;AAA7C;;;;;AAFX;;;AAAA;;;AAAA;AAKA;AAAwB;;;;;;;;;;AAAxB;;AAMmB;AAAA;AAAA;AAAA;AACI;AAAA;AAAA;AAAA;AACL;AAAA;AAAA;AAAA;AACH;AAAA;AAAA;AAAA;AACD;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACC;AAAA;;AAAA;AAAA;AACQ;;AAAZ;AARX",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.algo_freelance.contract.AlgoFreelance.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2"
    },
    "6": {
      "op": "bytecblock \"job_status\" \"client_address\" \"freelancer_address\" \"escrow_amount\" \"work_hash\" \"job_title\" \"created_at\" 0x0000000000000000 0x0000000000000001 0x0000000000000002"
    },
    "125": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "127": {
      "op": "bz main_bare_routing@11",
      "stack_out": []
    },
    "130": {
      "op": "pushbytess 0x890632b1 0xe9892bef 0xe031da70 0x40c3067f 0x31f26a9b 0xd0e63f01 // method \"initialize(address,address,uint64,string)void\", method \"fund()void\", method \"submit_work(string)void\", method \"approve_work()void\", method \"cancel()void\", method \"get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)\"",
      "defined_out": [
        "Method(approve_work()void)",
        "Method(cancel()void)",
        "Method(fund()void)",
        "Method(get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64))",
        "Method(initialize(address,address,uint64,string)void)",
        "Method(submit_work(string)void)"
      ],
      "stack_out": [
        "Method(initialize(address,address,uint64,string)void)",
        "Method(fund()void)",
        "Method(submit_work(string)void)",
        "Method(approve_work()void)",
        "Method(cancel()void)",
        "Method(get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64))"
      ]
    },
    "162": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(approve_work()void)",
        "Method(cancel()void)",
        "Method(fund()void)",
        "Method(get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64))",
        "Method(initialize(address,address,uint64,string)void)",
        "Method(submit_work(string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(initialize(address,address,uint64,string)void)",
        "Method(fund()void)",
        "Method(submit_work(string)void)",
        "Method(approve_work()void)",
        "Method(cancel()void)",
        "Method(get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64))",
        "tmp%2#0"
      ]
    },
    "165": {
      "op": "match main_initialize_route@5 main_fund_route@6 main_submit_work_route@7 main_approve_work_route@8 main_cancel_route@9 main_get_job_details_route@10",
      "stack_out": []
    },
    "179": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "180": {
      "op": "return",
      "stack_out": []
    },
    "181": {
      "block": "main_get_job_details_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "183": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "184": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "185": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "187": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "188": {
      "callsub": "smart_contracts.algo_freelance.contract.AlgoFreelance.get_job_details",
      "op": "callsub get_job_details",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ]
    },
    "191": {
      "op": "uncover 7",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%0#0"
      ]
    },
    "193": {
      "op": "uncover 7",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "195": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "196": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%2#0",
        "elements_to_encode%2#0"
      ]
    },
    "198": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "199": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%3#0",
        "elements_to_encode%3#0"
      ]
    },
    "201": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "202": {
      "op": "pushbytes 0x0064",
      "defined_out": [
        "0x0064",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%4#0",
        "0x0064"
      ]
    },
    "206": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "207": {
      "op": "dig 4",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%4#0 (copy)",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%5#0",
        "elements_to_encode%4#0 (copy)"
      ]
    },
    "209": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%5#0",
        "data_length%0#0"
      ]
    },
    "210": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "data_length%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%5#0",
        "data_length%0#0",
        "100"
      ]
    },
    "212": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%5#0",
        "current_tail_offset%1#0"
      ]
    },
    "213": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%5#0",
        "as_bytes%1#0"
      ]
    },
    "214": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%5#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%5#0",
        "offset_as_uint16%1#0"
      ]
    },
    "217": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "218": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%6#0",
        "elements_to_encode%6#0"
      ]
    },
    "220": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "221": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%7#0",
        "elements_to_encode%7#0"
      ]
    },
    "222": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "223": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%8#0",
        "elements_to_encode%4#0"
      ]
    },
    "225": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "226": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "elements_to_encode%5#0"
      ]
    },
    "227": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0"
      ]
    },
    "228": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "0x151f7c75"
      ]
    },
    "234": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "235": {
      "op": "concat",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "236": {
      "op": "log",
      "stack_out": []
    },
    "237": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "238": {
      "op": "return",
      "stack_out": []
    },
    "239": {
      "block": "main_cancel_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "241": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "242": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "243": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "245": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "246": {
      "callsub": "smart_contracts.algo_freelance.contract.AlgoFreelance.cancel",
      "op": "callsub cancel"
    },
    "249": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "250": {
      "op": "return",
      "stack_out": []
    },
    "251": {
      "block": "main_approve_work_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "253": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "254": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "255": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "257": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "258": {
      "callsub": "smart_contracts.algo_freelance.contract.AlgoFreelance.approve_work",
      "op": "callsub approve_work"
    },
    "261": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "262": {
      "op": "return",
      "stack_out": []
    },
    "263": {
      "block": "main_submit_work_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "265": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "266": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "267": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "269": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "270": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "273": {
      "callsub": "smart_contracts.algo_freelance.contract.AlgoFreelance.submit_work",
      "op": "callsub submit_work",
      "stack_out": []
    },
    "276": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "277": {
      "op": "return",
      "stack_out": []
    },
    "278": {
      "block": "main_fund_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "280": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "281": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "282": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "284": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "285": {
      "callsub": "smart_contracts.algo_freelance.contract.AlgoFreelance.fund",
      "op": "callsub fund"
    },
    "288": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "289": {
      "op": "return",
      "stack_out": []
    },
    "290": {
      "block": "main_initialize_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "292": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "293": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "294": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "296": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "297": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "300": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "303": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "306": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%7#0"
      ]
    },
    "309": {
      "callsub": "smart_contracts.algo_freelance.contract.AlgoFreelance.initialize",
      "op": "callsub initialize",
      "stack_out": []
    },
    "312": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "313": {
      "op": "return",
      "stack_out": []
    },
    "314": {
      "block": "main_bare_routing@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "316": {
      "op": "bnz main_after_if_else@13",
      "stack_out": []
    },
    "319": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "321": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "322": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "323": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "324": {
      "op": "return",
      "stack_out": []
    },
    "325": {
      "subroutine": "smart_contracts.algo_freelance.contract.AlgoFreelance.initialize",
      "params": {
        "client_address#0": "bytes",
        "freelancer_address#0": "bytes",
        "escrow_amount#0": "bytes",
        "job_title#0": "bytes"
      },
      "block": "initialize",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "328": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "330": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "332": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "333": {
      "error": "Only the creator can initialize the contract",
      "op": "assert // Only the creator can initialize the contract",
      "stack_out": []
    },
    "334": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "335": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "336": {
      "op": "frame_dig -2",
      "defined_out": [
        "escrow_amount#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "escrow_amount#0 (copy)"
      ]
    },
    "338": {
      "op": "b<",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "339": {
      "error": "Escrow amount must be greater than 0",
      "op": "assert // Escrow amount must be greater than 0",
      "stack_out": []
    },
    "340": {
      "op": "bytec_1 // \"client_address\"",
      "defined_out": [
        "\"client_address\""
      ],
      "stack_out": [
        "\"client_address\""
      ]
    },
    "341": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"client_address\"",
        "client_address#0 (copy)"
      ],
      "stack_out": [
        "\"client_address\"",
        "client_address#0 (copy)"
      ]
    },
    "343": {
      "op": "app_global_put",
      "stack_out": []
    },
    "344": {
      "op": "bytec_2 // \"freelancer_address\"",
      "defined_out": [
        "\"freelancer_address\""
      ],
      "stack_out": [
        "\"freelancer_address\""
      ]
    },
    "345": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"freelancer_address\"",
        "freelancer_address#0 (copy)"
      ],
      "stack_out": [
        "\"freelancer_address\"",
        "freelancer_address#0 (copy)"
      ]
    },
    "347": {
      "op": "app_global_put",
      "stack_out": []
    },
    "348": {
      "op": "bytec_3 // \"escrow_amount\"",
      "defined_out": [
        "\"escrow_amount\""
      ],
      "stack_out": [
        "\"escrow_amount\""
      ]
    },
    "349": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"escrow_amount\"",
        "escrow_amount#0 (copy)"
      ]
    },
    "351": {
      "op": "app_global_put",
      "stack_out": []
    },
    "352": {
      "op": "bytec 5 // \"job_title\"",
      "defined_out": [
        "\"job_title\""
      ],
      "stack_out": [
        "\"job_title\""
      ]
    },
    "354": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"job_title\"",
        "job_title#0 (copy)"
      ],
      "stack_out": [
        "\"job_title\"",
        "job_title#0 (copy)"
      ]
    },
    "356": {
      "op": "app_global_put",
      "stack_out": []
    },
    "357": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "359": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "360": {
      "op": "bytec 6 // \"created_at\"",
      "defined_out": [
        "\"created_at\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"created_at\""
      ]
    },
    "362": {
      "op": "swap",
      "stack_out": [
        "\"created_at\"",
        "val_as_bytes%0#0"
      ]
    },
    "363": {
      "op": "app_global_put",
      "stack_out": []
    },
    "364": {
      "op": "bytec_0 // \"job_status\"",
      "defined_out": [
        "\"job_status\""
      ],
      "stack_out": [
        "\"job_status\""
      ]
    },
    "365": {
      "op": "bytec 7 // 0x0000000000000000",
      "defined_out": [
        "\"job_status\"",
        "0x0000000000000000"
      ],
      "stack_out": [
        "\"job_status\"",
        "0x0000000000000000"
      ]
    },
    "367": {
      "op": "app_global_put",
      "stack_out": []
    },
    "368": {
      "op": "bytec 4 // \"work_hash\"",
      "defined_out": [
        "\"work_hash\""
      ],
      "stack_out": [
        "\"work_hash\""
      ]
    },
    "370": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "\"work_hash\"",
        "0x0000"
      ],
      "stack_out": [
        "\"work_hash\"",
        "0x0000"
      ]
    },
    "374": {
      "op": "app_global_put",
      "stack_out": []
    },
    "375": {
      "retsub": true,
      "op": "retsub"
    },
    "376": {
      "subroutine": "smart_contracts.algo_freelance.contract.AlgoFreelance.fund",
      "params": {},
      "block": "fund",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "377": {
      "op": "bytec_0 // \"job_status\"",
      "defined_out": [
        "\"job_status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"job_status\""
      ]
    },
    "378": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "379": {
      "error": "check self.job_status exists",
      "op": "assert // check self.job_status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "380": {
      "op": "bytec 7 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x0000000000000000"
      ]
    },
    "382": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "383": {
      "error": "Job not in Created status",
      "op": "assert // Job not in Created status",
      "stack_out": []
    },
    "384": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "386": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "387": {
      "op": "bytec_1 // \"client_address\"",
      "defined_out": [
        "\"client_address\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"client_address\""
      ]
    },
    "388": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "389": {
      "error": "check self.client_address exists",
      "op": "assert // check self.client_address exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "390": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "391": {
      "error": "Only client can fund",
      "op": "assert // Only client can fund",
      "stack_out": []
    },
    "392": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "394": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "2"
      ]
    },
    "395": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "396": {
      "error": "Must be grouped with a payment transaction",
      "op": "assert // Must be grouped with a payment transaction",
      "stack_out": []
    },
    "397": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "398": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_type%0#0"
      ]
    },
    "400": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "401": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_type_matches%0#0"
      ]
    },
    "402": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": []
    },
    "403": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "404": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "406": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "408": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "409": {
      "error": "Payment must be to the contract",
      "op": "assert // Payment must be to the contract",
      "stack_out": []
    },
    "410": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "411": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "413": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "414": {
      "op": "bytec_3 // \"escrow_amount\"",
      "defined_out": [
        "\"escrow_amount\"",
        "0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0",
        "\"escrow_amount\""
      ]
    },
    "415": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "416": {
      "error": "check self.escrow_amount exists",
      "op": "assert // check self.escrow_amount exists",
      "stack_out": [
        "tmp%8#0",
        "maybe_value%2#0"
      ]
    },
    "417": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "418": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "419": {
      "error": "Payment amount must match escrow amount",
      "op": "assert // Payment amount must match escrow amount",
      "stack_out": []
    },
    "420": {
      "op": "bytec_0 // \"job_status\"",
      "stack_out": [
        "\"job_status\""
      ]
    },
    "421": {
      "op": "bytec 8 // 0x0000000000000001",
      "defined_out": [
        "\"job_status\"",
        "0x0000000000000001"
      ],
      "stack_out": [
        "\"job_status\"",
        "0x0000000000000001"
      ]
    },
    "423": {
      "op": "app_global_put",
      "stack_out": []
    },
    "424": {
      "retsub": true,
      "op": "retsub"
    },
    "425": {
      "subroutine": "smart_contracts.algo_freelance.contract.AlgoFreelance.submit_work",
      "params": {
        "ipfs_hash#0": "bytes"
      },
      "block": "submit_work",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "428": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "429": {
      "op": "bytec_0 // \"job_status\"",
      "defined_out": [
        "\"job_status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"job_status\""
      ]
    },
    "430": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "431": {
      "error": "check self.job_status exists",
      "op": "assert // check self.job_status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "432": {
      "op": "bytec 8 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x0000000000000001"
      ]
    },
    "434": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "435": {
      "error": "Job not in Funded status",
      "op": "assert // Job not in Funded status",
      "stack_out": []
    },
    "436": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "438": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "439": {
      "op": "bytec_2 // \"freelancer_address\"",
      "defined_out": [
        "\"freelancer_address\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"freelancer_address\""
      ]
    },
    "440": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "441": {
      "error": "check self.freelancer_address exists",
      "op": "assert // check self.freelancer_address exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "442": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "443": {
      "error": "Only freelancer can submit work",
      "op": "assert // Only freelancer can submit work",
      "stack_out": []
    },
    "444": {
      "op": "frame_dig -1",
      "defined_out": [
        "ipfs_hash#0 (copy)"
      ],
      "stack_out": [
        "ipfs_hash#0 (copy)"
      ]
    },
    "446": {
      "op": "len",
      "defined_out": [
        "hash_len#0"
      ],
      "stack_out": [
        "hash_len#0"
      ]
    },
    "447": {
      "op": "dup",
      "defined_out": [
        "hash_len#0"
      ],
      "stack_out": [
        "hash_len#0",
        "hash_len#0"
      ]
    },
    "448": {
      "op": "pushint 46 // 46",
      "defined_out": [
        "46",
        "hash_len#0"
      ],
      "stack_out": [
        "hash_len#0",
        "hash_len#0",
        "46"
      ]
    },
    "450": {
      "op": ">=",
      "defined_out": [
        "hash_len#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "hash_len#0",
        "tmp%3#0"
      ]
    },
    "451": {
      "op": "bz submit_work_bool_false@3",
      "stack_out": [
        "hash_len#0"
      ]
    },
    "454": {
      "op": "frame_dig 0",
      "stack_out": [
        "hash_len#0",
        "hash_len#0"
      ]
    },
    "456": {
      "op": "pushint 59 // 59",
      "defined_out": [
        "59",
        "hash_len#0"
      ],
      "stack_out": [
        "hash_len#0",
        "hash_len#0",
        "59"
      ]
    },
    "458": {
      "op": "<=",
      "defined_out": [
        "hash_len#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "hash_len#0",
        "tmp%4#0"
      ]
    },
    "459": {
      "op": "bz submit_work_bool_false@3",
      "stack_out": [
        "hash_len#0"
      ]
    },
    "462": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "hash_len#0"
      ],
      "stack_out": [
        "hash_len#0",
        "and_result%0#0"
      ]
    },
    "463": {
      "block": "submit_work_bool_merge@4",
      "stack_in": [
        "hash_len#0",
        "and_result%0#0"
      ],
      "error": "Invalid IPFS hash length",
      "op": "assert // Invalid IPFS hash length",
      "defined_out": [],
      "stack_out": [
        "hash_len#0"
      ]
    },
    "464": {
      "op": "bytec 4 // \"work_hash\"",
      "defined_out": [
        "\"work_hash\""
      ],
      "stack_out": [
        "hash_len#0",
        "\"work_hash\""
      ]
    },
    "466": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"work_hash\"",
        "ipfs_hash#0 (copy)"
      ],
      "stack_out": [
        "hash_len#0",
        "\"work_hash\"",
        "ipfs_hash#0 (copy)"
      ]
    },
    "468": {
      "op": "app_global_put",
      "stack_out": [
        "hash_len#0"
      ]
    },
    "469": {
      "op": "bytec_0 // \"job_status\"",
      "defined_out": [
        "\"job_status\""
      ],
      "stack_out": [
        "hash_len#0",
        "\"job_status\""
      ]
    },
    "470": {
      "op": "bytec 9 // 0x0000000000000002",
      "defined_out": [
        "\"job_status\"",
        "0x0000000000000002"
      ],
      "stack_out": [
        "hash_len#0",
        "\"job_status\"",
        "0x0000000000000002"
      ]
    },
    "472": {
      "op": "app_global_put",
      "stack_out": [
        "hash_len#0"
      ]
    },
    "473": {
      "retsub": true,
      "op": "retsub"
    },
    "474": {
      "block": "submit_work_bool_false@3",
      "stack_in": [
        "hash_len#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "hash_len#0",
        "and_result%0#0"
      ]
    },
    "475": {
      "op": "b submit_work_bool_merge@4"
    },
    "478": {
      "subroutine": "smart_contracts.algo_freelance.contract.AlgoFreelance.approve_work",
      "params": {},
      "block": "approve_work",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "479": {
      "op": "bytec_0 // \"job_status\"",
      "defined_out": [
        "\"job_status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"job_status\""
      ]
    },
    "480": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "481": {
      "error": "check self.job_status exists",
      "op": "assert // check self.job_status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "482": {
      "op": "bytec 9 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x0000000000000002"
      ]
    },
    "484": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "485": {
      "error": "Job not in Submitted status",
      "op": "assert // Job not in Submitted status",
      "stack_out": []
    },
    "486": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "488": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "489": {
      "op": "bytec_1 // \"client_address\"",
      "defined_out": [
        "\"client_address\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"client_address\""
      ]
    },
    "490": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "491": {
      "error": "check self.client_address exists",
      "op": "assert // check self.client_address exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "492": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "493": {
      "error": "Only client can approve work",
      "op": "assert // Only client can approve work",
      "stack_out": []
    },
    "494": {
      "op": "itxn_begin"
    },
    "495": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "496": {
      "op": "bytec_2 // \"freelancer_address\"",
      "defined_out": [
        "\"freelancer_address\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"freelancer_address\""
      ]
    },
    "497": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "498": {
      "error": "check self.freelancer_address exists",
      "op": "assert // check self.freelancer_address exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "499": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "500": {
      "op": "bytec_3 // \"escrow_amount\"",
      "defined_out": [
        "\"escrow_amount\"",
        "0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "0",
        "\"escrow_amount\""
      ]
    },
    "501": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "502": {
      "error": "check self.escrow_amount exists",
      "op": "assert // check self.escrow_amount exists",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "503": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "504": {
      "op": "itxn_field Amount",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "506": {
      "op": "dup",
      "defined_out": [
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ]
    },
    "507": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "509": {
      "op": "intc_1 // pay",
      "defined_out": [
        "maybe_value%2#0",
        "pay"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "pay"
      ]
    },
    "510": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "512": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "513": {
      "op": "itxn_field Fee",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "515": {
      "op": "itxn_submit"
    },
    "516": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "517": {
      "op": "bytec 5 // \"job_title\"",
      "defined_out": [
        "\"job_title\"",
        "0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "0",
        "\"job_title\""
      ]
    },
    "519": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%2#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "520": {
      "error": "check self.job_title exists",
      "op": "assert // check self.job_title exists",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%4#0"
      ]
    },
    "521": {
      "op": "extract 2 0",
      "defined_out": [
        "job_title_bytes#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "job_title_bytes#0"
      ]
    },
    "524": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "job_title_bytes#0",
        "0"
      ]
    },
    "525": {
      "op": "bytec 4 // \"work_hash\"",
      "defined_out": [
        "\"work_hash\"",
        "0",
        "job_title_bytes#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "job_title_bytes#0",
        "0",
        "\"work_hash\""
      ]
    },
    "527": {
      "op": "app_global_get_ex",
      "defined_out": [
        "job_title_bytes#0",
        "maybe_exists%5#0",
        "maybe_value%2#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "job_title_bytes#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "528": {
      "error": "check self.work_hash exists",
      "op": "assert // check self.work_hash exists",
      "stack_out": [
        "maybe_value%2#0",
        "job_title_bytes#0",
        "maybe_value%5#0"
      ]
    },
    "529": {
      "op": "extract 2 0",
      "defined_out": [
        "job_title_bytes#0",
        "maybe_value%2#0",
        "work_hash_bytes#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "job_title_bytes#0",
        "work_hash_bytes#0"
      ]
    },
    "532": {
      "op": "itxn_begin"
    },
    "533": {
      "op": "pushbytes 0x416c676f467265656c616e63653a20",
      "defined_out": [
        "0x416c676f467265656c616e63653a20",
        "job_title_bytes#0",
        "maybe_value%2#0",
        "work_hash_bytes#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "job_title_bytes#0",
        "work_hash_bytes#0",
        "0x416c676f467265656c616e63653a20"
      ]
    },
    "550": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%2#0",
        "work_hash_bytes#0",
        "0x416c676f467265656c616e63653a20",
        "job_title_bytes#0"
      ]
    },
    "552": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "maybe_value%2#0",
        "work_hash_bytes#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "work_hash_bytes#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "553": {
      "op": "pushbytes 0x697066733a2f2f",
      "defined_out": [
        "0x697066733a2f2f",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "maybe_value%2#0",
        "work_hash_bytes#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "work_hash_bytes#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "0x697066733a2f2f"
      ]
    },
    "562": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "0x697066733a2f2f",
        "work_hash_bytes#0"
      ]
    },
    "564": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0"
      ]
    },
    "565": {
      "op": "global ZeroAddress",
      "defined_out": [
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "567": {
      "op": "dupn 3",
      "defined_out": [
        "inner_txn_params%1%%param_ConfigAssetClawback_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetClawback_idx_0#0"
      ]
    },
    "569": {
      "op": "itxn_field ConfigAssetClawback",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetFreeze_idx_0#0"
      ]
    },
    "571": {
      "op": "itxn_field ConfigAssetFreeze",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetReserve_idx_0#0"
      ]
    },
    "573": {
      "op": "itxn_field ConfigAssetReserve",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "575": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetURL_idx_0#0"
      ]
    },
    "577": {
      "op": "itxn_field ConfigAssetURL",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "579": {
      "op": "pushbytes 0x504f5743455254",
      "defined_out": [
        "0x504f5743455254",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "0x504f5743455254"
      ]
    },
    "588": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "590": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "592": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "593": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "595": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "1"
      ]
    },
    "596": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "598": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "acfg"
      ]
    },
    "600": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "602": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "603": {
      "op": "itxn_field Fee",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "605": {
      "op": "itxn_submit"
    },
    "606": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "maybe_value%2#0",
        "nft_creation.CreatedAssetID#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "nft_creation.CreatedAssetID#0"
      ]
    },
    "608": {
      "op": "itxn_begin"
    },
    "609": {
      "op": "intc_1 // 1",
      "stack_out": [
        "maybe_value%2#0",
        "nft_creation.CreatedAssetID#0",
        "1"
      ]
    },
    "610": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%2#0",
        "nft_creation.CreatedAssetID#0"
      ]
    },
    "612": {
      "op": "itxn_field XferAsset"
    },
    "614": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "616": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "618": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "620": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "621": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "623": {
      "op": "itxn_submit"
    },
    "624": {
      "op": "bytec_0 // \"job_status\"",
      "stack_out": [
        "\"job_status\""
      ]
    },
    "625": {
      "op": "pushbytes 0x0000000000000003",
      "defined_out": [
        "\"job_status\"",
        "0x0000000000000003"
      ],
      "stack_out": [
        "\"job_status\"",
        "0x0000000000000003"
      ]
    },
    "635": {
      "op": "app_global_put",
      "stack_out": []
    },
    "636": {
      "retsub": true,
      "op": "retsub"
    },
    "637": {
      "subroutine": "smart_contracts.algo_freelance.contract.AlgoFreelance.cancel",
      "params": {},
      "block": "cancel",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "638": {
      "op": "bytec_0 // \"job_status\"",
      "defined_out": [
        "\"job_status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"job_status\""
      ]
    },
    "639": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "640": {
      "error": "check self.job_status exists",
      "op": "assert // check self.job_status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "641": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "642": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "643": {
      "op": "<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "644": {
      "error": "Job cannot be canceled after work has been submitted",
      "op": "assert // Job cannot be canceled after work has been submitted",
      "stack_out": []
    },
    "645": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "647": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "648": {
      "op": "bytec_1 // \"client_address\"",
      "defined_out": [
        "\"client_address\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"client_address\""
      ]
    },
    "649": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "650": {
      "error": "check self.client_address exists",
      "op": "assert // check self.client_address exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "651": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0"
      ]
    },
    "652": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "654": {
      "op": "==",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%3#0"
      ]
    },
    "655": {
      "error": "Only client can cancel",
      "op": "assert // Only client can cancel",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "656": {
      "op": "itxn_begin"
    },
    "657": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%4#0"
      ]
    },
    "659": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "maybe_value%1#0",
        "value%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "661": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "maybe_value%1#0",
        "value%0#0"
      ]
    },
    "662": {
      "op": "global MinBalance",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%5#0",
        "value%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "value%0#0",
        "tmp%5#0"
      ]
    },
    "664": {
      "op": "-",
      "defined_out": [
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "665": {
      "op": "itxn_field Amount",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "667": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "669": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "670": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "672": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "673": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "675": {
      "op": "itxn_submit"
    },
    "676": {
      "op": "bytec_0 // \"job_status\"",
      "stack_out": [
        "\"job_status\""
      ]
    },
    "677": {
      "op": "pushbytes 0x0000000000000004",
      "defined_out": [
        "\"job_status\"",
        "0x0000000000000004"
      ],
      "stack_out": [
        "\"job_status\"",
        "0x0000000000000004"
      ]
    },
    "687": {
      "op": "app_global_put",
      "stack_out": []
    },
    "688": {
      "retsub": true,
      "op": "retsub"
    },
    "689": {
      "subroutine": "smart_contracts.algo_freelance.contract.AlgoFreelance.get_job_details",
      "params": {},
      "block": "get_job_details",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "690": {
      "op": "bytec_1 // \"client_address\"",
      "defined_out": [
        "\"client_address\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"client_address\""
      ]
    },
    "691": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "692": {
      "error": "check self.client_address exists",
      "op": "assert // check self.client_address exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "693": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "694": {
      "op": "bytec_2 // \"freelancer_address\"",
      "defined_out": [
        "\"freelancer_address\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"freelancer_address\""
      ]
    },
    "695": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "696": {
      "error": "check self.freelancer_address exists",
      "op": "assert // check self.freelancer_address exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "697": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "698": {
      "op": "bytec_3 // \"escrow_amount\"",
      "defined_out": [
        "\"escrow_amount\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"escrow_amount\""
      ]
    },
    "699": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "700": {
      "error": "check self.escrow_amount exists",
      "op": "assert // check self.escrow_amount exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "701": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "702": {
      "op": "bytec_0 // \"job_status\"",
      "defined_out": [
        "\"job_status\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"job_status\""
      ]
    },
    "703": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "704": {
      "error": "check self.job_status exists",
      "op": "assert // check self.job_status exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "705": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "706": {
      "op": "bytec 4 // \"work_hash\"",
      "defined_out": [
        "\"work_hash\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"work_hash\""
      ]
    },
    "708": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "709": {
      "error": "check self.work_hash exists",
      "op": "assert // check self.work_hash exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "710": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "711": {
      "op": "bytec 5 // \"job_title\"",
      "defined_out": [
        "\"job_title\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0",
        "\"job_title\""
      ]
    },
    "713": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "714": {
      "error": "check self.job_title exists",
      "op": "assert // check self.job_title exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "715": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0"
      ]
    },
    "716": {
      "op": "bytec 6 // \"created_at\"",
      "defined_out": [
        "\"created_at\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0",
        "\"created_at\""
      ]
    },
    "718": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "719": {
      "error": "check self.created_at exists",
      "op": "assert // check self.created_at exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ]
    },
    "720": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "to_encode%0#0"
      ]
    },
    "722": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "723": {
      "retsub": true,
      "op": "retsub"
    }
  }
}