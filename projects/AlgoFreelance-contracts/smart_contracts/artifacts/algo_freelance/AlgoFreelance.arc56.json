{
    "name": "AlgoFreelance",
    "structs": {
        "JobDetails": [
            {
                "name": "client_address",
                "type": "address"
            },
            {
                "name": "freelancer_address",
                "type": "address"
            },
            {
                "name": "escrow_amount",
                "type": "uint64"
            },
            {
                "name": "job_status",
                "type": "uint64"
            },
            {
                "name": "work_hash",
                "type": "string"
            },
            {
                "name": "job_title",
                "type": "string"
            },
            {
                "name": "created_at",
                "type": "uint64"
            },
            {
                "name": "app_id",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "initialize",
            "args": [
                {
                    "type": "address",
                    "name": "client_address"
                },
                {
                    "type": "address",
                    "name": "freelancer_address"
                },
                {
                    "type": "uint64",
                    "name": "escrow_amount"
                },
                {
                    "type": "string",
                    "name": "job_title"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fund",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "submit_work",
            "args": [
                {
                    "type": "string",
                    "name": "ipfs_hash"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "approve_work",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "cancel",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_job_details",
            "args": [],
            "returns": {
                "type": "(address,address,uint64,uint64,string,string,uint64,uint64)",
                "struct": "JobDetails"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 7
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "client_address": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "Y2xpZW50X2FkZHJlc3M="
                },
                "freelancer_address": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "ZnJlZWxhbmNlcl9hZGRyZXNz"
                },
                "escrow_amount": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "ZXNjcm93X2Ftb3VudA=="
                },
                "job_status": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "am9iX3N0YXR1cw=="
                },
                "work_hash": {
                    "keyType": "AVMString",
                    "valueType": "string",
                    "key": "d29ya19oYXNo"
                },
                "job_title": {
                    "keyType": "AVMString",
                    "valueType": "string",
                    "key": "am9iX3RpdGxl"
                },
                "created_at": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "Y3JlYXRlZF9hdA=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        245
                    ],
                    "errorMessage": "Escrow amount must be greater than 0"
                },
                {
                    "pc": [
                        381
                    ],
                    "errorMessage": "Invalid IPFS hash length"
                },
                {
                    "pc": [
                        564
                    ],
                    "errorMessage": "Job cannot be canceled after work has been submitted"
                },
                {
                    "pc": [
                        289
                    ],
                    "errorMessage": "Job not in Created status"
                },
                {
                    "pc": [
                        358
                    ],
                    "errorMessage": "Job not in Funded status"
                },
                {
                    "pc": [
                        404
                    ],
                    "errorMessage": "Job not in Submitted status"
                },
                {
                    "pc": [
                        302
                    ],
                    "errorMessage": "Must be grouped with a payment transaction"
                },
                {
                    "pc": [
                        134
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        195
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        412
                    ],
                    "errorMessage": "Only client can approve work"
                },
                {
                    "pc": [
                        575
                    ],
                    "errorMessage": "Only client can cancel"
                },
                {
                    "pc": [
                        297
                    ],
                    "errorMessage": "Only client can fund"
                },
                {
                    "pc": [
                        366
                    ],
                    "errorMessage": "Only freelancer can submit work"
                },
                {
                    "pc": [
                        239
                    ],
                    "errorMessage": "Only the creator can initialize the contract"
                },
                {
                    "pc": [
                        325
                    ],
                    "errorMessage": "Payment amount must match escrow amount"
                },
                {
                    "pc": [
                        315
                    ],
                    "errorMessage": "Payment must be to the contract"
                },
                {
                    "pc": [
                        581
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        295,
                        410,
                        570,
                        613
                    ],
                    "errorMessage": "check self.client_address exists"
                },
                {
                    "pc": [
                        640
                    ],
                    "errorMessage": "check self.created_at exists"
                },
                {
                    "pc": [
                        322,
                        421,
                        621
                    ],
                    "errorMessage": "check self.escrow_amount exists"
                },
                {
                    "pc": [
                        364,
                        417,
                        617
                    ],
                    "errorMessage": "check self.freelancer_address exists"
                },
                {
                    "pc": [
                        285,
                        354,
                        400,
                        560,
                        625
                    ],
                    "errorMessage": "check self.job_status exists"
                },
                {
                    "pc": [
                        439,
                        635
                    ],
                    "errorMessage": "check self.job_title exists"
                },
                {
                    "pc": [
                        447,
                        630
                    ],
                    "errorMessage": "check self.work_hash exists"
                },
                {
                    "pc": [
                        233,
                        350
                    ],
                    "errorMessage": "invalid number of bytes for (len+utf8[])"
                },
                {
                    "pc": [
                        220
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        203,
                        211
                    ],
                    "errorMessage": "invalid number of bytes for uint8[32]"
                },
                {
                    "pc": [
                        308
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEgMiAzMgogICAgYnl0ZWNibG9jayAiam9iX3N0YXR1cyIgImNsaWVudF9hZGRyZXNzIiAiZnJlZWxhbmNlcl9hZGRyZXNzIiAiZXNjcm93X2Ftb3VudCIgIndvcmtfaGFzaCIgImpvYl90aXRsZSIgImNyZWF0ZWRfYXQiIDB4MDAwMDAwMDAwMDAwMDAwMCAweDAwMDAwMDAwMDAwMDAwMDEgMHgwMDAwMDAwMDAwMDAwMDAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6MjEKICAgIC8vIGNsYXNzIEFsZ29GcmVlbGFuY2UoQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX19fYWxnb3B5X2RlZmF1bHRfY3JlYXRlQDE1CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydAogICAgcHVzaGJ5dGVzcyAweDg5MDYzMmIxIDB4ZTk4OTJiZWYgMHhlMDMxZGE3MCAweDQwYzMwNjdmIDB4MzFmMjZhOWIgMHhkMGU2M2YwMSAvLyBtZXRob2QgImluaXRpYWxpemUoYWRkcmVzcyxhZGRyZXNzLHVpbnQ2NCxzdHJpbmcpdm9pZCIsIG1ldGhvZCAiZnVuZCgpdm9pZCIsIG1ldGhvZCAic3VibWl0X3dvcmsoc3RyaW5nKXZvaWQiLCBtZXRob2QgImFwcHJvdmVfd29yaygpdm9pZCIsIG1ldGhvZCAiY2FuY2VsKCl2b2lkIiwgbWV0aG9kICJnZXRfam9iX2RldGFpbHMoKShhZGRyZXNzLGFkZHJlc3MsdWludDY0LHVpbnQ2NCxzdHJpbmcsc3RyaW5nLHVpbnQ2NCx1aW50NjQpIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggaW5pdGlhbGl6ZSBmdW5kIHN1Ym1pdF93b3JrIGFwcHJvdmVfd29yayBjYW5jZWwgZ2V0X2pvYl9kZXRhaWxzCiAgICBlcnIKCm1haW5fX19hbGdvcHlfZGVmYXVsdF9jcmVhdGVAMTU6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgJiYKICAgIHJldHVybiAvLyBvbiBlcnJvcjogT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcCAmJiBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKCgovLyBzbWFydF9jb250cmFjdHMuYWxnb19mcmVlbGFuY2UuY29udHJhY3QuQWxnb0ZyZWVsYW5jZS5pbml0aWFsaXplW3JvdXRpbmddKCkgLT4gdm9pZDoKaW5pdGlhbGl6ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvX2ZyZWVsYW5jZS9jb250cmFjdC5weTozMgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18zIC8vIDMyCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgbnVtYmVyIG9mIGJ5dGVzIGZvciB1aW50OFszMl0KICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzMgLy8gMzIKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBudW1iZXIgb2YgYnl0ZXMgZm9yIHVpbnQ4WzMyXQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgZHVwCiAgICBsZW4KICAgIHB1c2hpbnQgOCAvLyA4CiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgbnVtYmVyIG9mIGJ5dGVzIGZvciB1aW50NjQKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzIgLy8gMgogICAgKwogICAgZGlnIDEKICAgIGxlbgogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIG51bWJlciBvZiBieXRlcyBmb3IgKGxlbit1dGY4W10pCiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6NDAtNDEKICAgIC8vICMgLS0tIFBSRCDCpzYuMjogaW5pdGlhbGl6ZSgpIC0tLQogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcywgIk9ubHkgdGhlIGNyZWF0b3IgY2FuIGluaXRpYWxpemUgdGhlIGNvbnRyYWN0IgogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIE9ubHkgdGhlIGNyZWF0b3IgY2FuIGluaXRpYWxpemUgdGhlIGNvbnRyYWN0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6NDItNDMKICAgIC8vICMgRXh0cmFjdCBuYXRpdmUgdmFsdWVzIGZyb20gQVJDNCB0eXBlcwogICAgLy8gYXNzZXJ0IGVzY3Jvd19hbW91bnQgPiBVSW50NjQoMCksICJFc2Nyb3cgYW1vdW50IG11c3QgYmUgZ3JlYXRlciB0aGFuIDAiCiAgICBpbnRjXzAgLy8gMAogICAgaXRvYgogICAgZGlnIDIKICAgIGI8CiAgICBhc3NlcnQgLy8gRXNjcm93IGFtb3VudCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6NDUtNDYKICAgIC8vICMgVXNlIC52YWx1ZSB0byBzZXQgZ2xvYmFsIHN0YXRlCiAgICAvLyBzZWxmLmNsaWVudF9hZGRyZXNzLnZhbHVlID0gY2xpZW50X2FkZHJlc3MKICAgIGJ5dGVjXzEgLy8gImNsaWVudF9hZGRyZXNzIgogICAgdW5jb3ZlciA0CiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjQ3CiAgICAvLyBzZWxmLmZyZWVsYW5jZXJfYWRkcmVzcy52YWx1ZSA9IGZyZWVsYW5jZXJfYWRkcmVzcwogICAgYnl0ZWNfMiAvLyAiZnJlZWxhbmNlcl9hZGRyZXNzIgogICAgdW5jb3ZlciAzCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjQ4CiAgICAvLyBzZWxmLmVzY3Jvd19hbW91bnQudmFsdWUgPSBlc2Nyb3dfYW1vdW50CiAgICBieXRlY18zIC8vICJlc2Nyb3dfYW1vdW50IgogICAgdW5jb3ZlciAyCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjQ5CiAgICAvLyBzZWxmLmpvYl90aXRsZS52YWx1ZSA9IGpvYl90aXRsZSAgIyBTdG9yZSBBUkM0IFN0cmluZyBkaXJlY3RseQogICAgYnl0ZWMgNSAvLyAiam9iX3RpdGxlIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvX2ZyZWVsYW5jZS9jb250cmFjdC5weTo1MAogICAgLy8gc2VsZi5jcmVhdGVkX2F0LnZhbHVlID0gYXJjNC5VSW50NjQoR2xvYmFsLmxhdGVzdF90aW1lc3RhbXApCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBpdG9iCiAgICBieXRlYyA2IC8vICJjcmVhdGVkX2F0IgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvX2ZyZWVsYW5jZS9jb250cmFjdC5weTo1MQogICAgLy8gc2VsZi5qb2Jfc3RhdHVzLnZhbHVlID0gYXJjNC5VSW50NjQoMCkgICMgU3RhdHVzOiBDcmVhdGVkCiAgICBieXRlY18wIC8vICJqb2Jfc3RhdHVzIgogICAgYnl0ZWMgNyAvLyAweDAwMDAwMDAwMDAwMDAwMDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6NTIKICAgIC8vIHNlbGYud29ya19oYXNoLnZhbHVlID0gYXJjNC5TdHJpbmcoIiIpICAjIEluaXRpYWxpemUgdG8gZW1wdHkgYXJjNCBzdHJpbmcKICAgIGJ5dGVjIDQgLy8gIndvcmtfaGFzaCIKICAgIHB1c2hieXRlcyAweDAwMDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6MzIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5hbGdvX2ZyZWVsYW5jZS5jb250cmFjdC5BbGdvRnJlZWxhbmNlLmZ1bmRbcm91dGluZ10oKSAtPiB2b2lkOgpmdW5kOgogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjU2LTU3CiAgICAvLyAjIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGEgcm9idXN0IHdheSB0byBhdG9taWNhbGx5IGZ1bmQgdGhlIGNvbnRyYWN0IGFuZCB1cGRhdGUgaXRzIHN0YXRlLgogICAgLy8gYXNzZXJ0IHNlbGYuam9iX3N0YXR1cy52YWx1ZSA9PSBhcmM0LlVJbnQ2NCgwKSwgIkpvYiBub3QgaW4gQ3JlYXRlZCBzdGF0dXMiCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAiam9iX3N0YXR1cyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5qb2Jfc3RhdHVzIGV4aXN0cwogICAgYnl0ZWMgNyAvLyAweDAwMDAwMDAwMDAwMDAwMDAKICAgIGI9PQogICAgYXNzZXJ0IC8vIEpvYiBub3QgaW4gQ3JlYXRlZCBzdGF0dXMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvX2ZyZWVsYW5jZS9jb250cmFjdC5weTo1OAogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5jbGllbnRfYWRkcmVzcy52YWx1ZS5uYXRpdmUsICJPbmx5IGNsaWVudCBjYW4gZnVuZCIKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJjbGllbnRfYWRkcmVzcyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5jbGllbnRfYWRkcmVzcyBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBjbGllbnQgY2FuIGZ1bmQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvX2ZyZWVsYW5jZS9jb250cmFjdC5weTo2MC02MQogICAgLy8gIyBWZXJpZnkgdGhpcyBhcHAgY2FsbCBpcyBncm91cGVkIHdpdGggYSBwYXltZW50IHRyYW5zYWN0aW9uIHRvIHRoaXMgY29udHJhY3QKICAgIC8vIGFzc2VydCBHbG9iYWwuZ3JvdXBfc2l6ZSA9PSBVSW50NjQoMiksICJNdXN0IGJlIGdyb3VwZWQgd2l0aCBhIHBheW1lbnQgdHJhbnNhY3Rpb24iCiAgICBnbG9iYWwgR3JvdXBTaXplCiAgICBpbnRjXzIgLy8gMgogICAgPT0KICAgIGFzc2VydCAvLyBNdXN0IGJlIGdyb3VwZWQgd2l0aCBhIHBheW1lbnQgdHJhbnNhY3Rpb24KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvX2ZyZWVsYW5jZS9jb250cmFjdC5weTo2MgogICAgLy8gcGF5bWVudF90eG4gPSBndHhuLlBheW1lbnRUcmFuc2FjdGlvbigxKQogICAgaW50Y18xIC8vIDEKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICBpbnRjXzEgLy8gMQogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjYzCiAgICAvLyBhc3NlcnQgcGF5bWVudF90eG4ucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywgIlBheW1lbnQgbXVzdCBiZSB0byB0aGUgY29udHJhY3QiCiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gUGF5bWVudCBtdXN0IGJlIHRvIHRoZSBjb250cmFjdAogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjYyCiAgICAvLyBwYXltZW50X3R4biA9IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uKDEpCiAgICBpbnRjXzEgLy8gMQogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjY0CiAgICAvLyBhc3NlcnQgcGF5bWVudF90eG4uYW1vdW50ID09IHNlbGYuZXNjcm93X2Ftb3VudC52YWx1ZS5uYXRpdmUsICJQYXltZW50IGFtb3VudCBtdXN0IG1hdGNoIGVzY3JvdyBhbW91bnQiCiAgICBndHhucyBBbW91bnQKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJlc2Nyb3dfYW1vdW50IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmVzY3Jvd19hbW91bnQgZXhpc3RzCiAgICBidG9pCiAgICA9PQogICAgYXNzZXJ0IC8vIFBheW1lbnQgYW1vdW50IG11c3QgbWF0Y2ggZXNjcm93IGFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjY2CiAgICAvLyBzZWxmLmpvYl9zdGF0dXMudmFsdWUgPSBhcmM0LlVJbnQ2NCgxKSAgIyBTdGF0dXM6IEZ1bmRlZAogICAgYnl0ZWNfMCAvLyAiam9iX3N0YXR1cyIKICAgIGJ5dGVjIDggLy8gMHgwMDAwMDAwMDAwMDAwMDAxCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjU0CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMuYWxnb19mcmVlbGFuY2UuY29udHJhY3QuQWxnb0ZyZWVsYW5jZS5zdWJtaXRfd29ya1tyb3V0aW5nXSgpIC0+IHZvaWQ6CnN1Ym1pdF93b3JrOgogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjY4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGR1cG4gMgogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzIgLy8gMgogICAgKwogICAgc3dhcAogICAgbGVuCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGR1cAogICAgdW5jb3ZlciAyCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgbnVtYmVyIG9mIGJ5dGVzIGZvciAobGVuK3V0ZjhbXSkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvX2ZyZWVsYW5jZS9jb250cmFjdC5weTo3MC03MQogICAgLy8gIyAtLS0gUFJEIMKnNi4yOiBzdWJtaXRfd29yaygpIC0tLQogICAgLy8gYXNzZXJ0IHNlbGYuam9iX3N0YXR1cy52YWx1ZSA9PSBhcmM0LlVJbnQ2NCgxKSwgIkpvYiBub3QgaW4gRnVuZGVkIHN0YXR1cyIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJqb2Jfc3RhdHVzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmpvYl9zdGF0dXMgZXhpc3RzCiAgICBieXRlYyA4IC8vIDB4MDAwMDAwMDAwMDAwMDAwMQogICAgYj09CiAgICBhc3NlcnQgLy8gSm9iIG5vdCBpbiBGdW5kZWQgc3RhdHVzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6NzIKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuZnJlZWxhbmNlcl9hZGRyZXNzLnZhbHVlLm5hdGl2ZSwgIk9ubHkgZnJlZWxhbmNlciBjYW4gc3VibWl0IHdvcmsiCiAgICB0eG4gU2VuZGVyCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiZnJlZWxhbmNlcl9hZGRyZXNzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZyZWVsYW5jZXJfYWRkcmVzcyBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBmcmVlbGFuY2VyIGNhbiBzdWJtaXQgd29yawogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5Ojc3CiAgICAvLyBhc3NlcnQgaGFzaF9sZW4gPj0gVUludDY0KDQ2KSBhbmQgaGFzaF9sZW4gPD0gVUludDY0KDU5KSwgIkludmFsaWQgSVBGUyBoYXNoIGxlbmd0aCIKICAgIHB1c2hpbnQgNDYgLy8gNDYKICAgID49CiAgICBieiBzdWJtaXRfd29ya19ib29sX2ZhbHNlQDQKICAgIGR1cAogICAgcHVzaGludCA1OSAvLyA1OQogICAgPD0KICAgIGJ6IHN1Ym1pdF93b3JrX2Jvb2xfZmFsc2VANAogICAgaW50Y18xIC8vIDEKCnN1Ym1pdF93b3JrX2Jvb2xfbWVyZ2VANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvX2ZyZWVsYW5jZS9jb250cmFjdC5weTo3NwogICAgLy8gYXNzZXJ0IGhhc2hfbGVuID49IFVJbnQ2NCg0NikgYW5kIGhhc2hfbGVuIDw9IFVJbnQ2NCg1OSksICJJbnZhbGlkIElQRlMgaGFzaCBsZW5ndGgiCiAgICBhc3NlcnQgLy8gSW52YWxpZCBJUEZTIGhhc2ggbGVuZ3RoCiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6NzktODAKICAgIC8vICMgU3RvcmUgdGhlIGFyYzQuU3RyaW5nIGRpcmVjdGx5CiAgICAvLyBzZWxmLndvcmtfaGFzaC52YWx1ZSA9IGlwZnNfaGFzaAogICAgYnl0ZWMgNCAvLyAid29ya19oYXNoIgogICAgZGlnIDIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6ODEKICAgIC8vIHNlbGYuam9iX3N0YXR1cy52YWx1ZSA9IGFyYzQuVUludDY0KDIpICAjIFN0YXR1czogU3VibWl0dGVkCiAgICBieXRlY18wIC8vICJqb2Jfc3RhdHVzIgogICAgYnl0ZWMgOSAvLyAweDAwMDAwMDAwMDAwMDAwMDIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6NjgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKc3VibWl0X3dvcmtfYm9vbF9mYWxzZUA0OgogICAgaW50Y18wIC8vIDAKICAgIGIgc3VibWl0X3dvcmtfYm9vbF9tZXJnZUA1CgoKLy8gc21hcnRfY29udHJhY3RzLmFsZ29fZnJlZWxhbmNlLmNvbnRyYWN0LkFsZ29GcmVlbGFuY2UuYXBwcm92ZV93b3JrW3JvdXRpbmddKCkgLT4gdm9pZDoKYXBwcm92ZV93b3JrOgogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5Ojg1LTg2CiAgICAvLyAjIC0tLSBQUkQgwqc2LjI6IGFwcHJvdmVfd29yaygpIC0tLQogICAgLy8gYXNzZXJ0IHNlbGYuam9iX3N0YXR1cy52YWx1ZSA9PSBhcmM0LlVJbnQ2NCgyKSwgIkpvYiBub3QgaW4gU3VibWl0dGVkIHN0YXR1cyIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJqb2Jfc3RhdHVzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmpvYl9zdGF0dXMgZXhpc3RzCiAgICBieXRlYyA5IC8vIDB4MDAwMDAwMDAwMDAwMDAwMgogICAgYj09CiAgICBhc3NlcnQgLy8gSm9iIG5vdCBpbiBTdWJtaXR0ZWQgc3RhdHVzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6ODcKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuY2xpZW50X2FkZHJlc3MudmFsdWUubmF0aXZlLCAiT25seSBjbGllbnQgY2FuIGFwcHJvdmUgd29yayIKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJjbGllbnRfYWRkcmVzcyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5jbGllbnRfYWRkcmVzcyBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBjbGllbnQgY2FuIGFwcHJvdmUgd29yawogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5Ojg5LTk1CiAgICAvLyAjIC0tLSBQUkQgwqc2LjIgQ29yZSBJbm5vdmF0aW9uOiBHcm91cGVkIElubmVyIFRyYW5zYWN0aW9ucyAtLS0KICAgIC8vICMgMS4gUGF5bWVudCB0byBGcmVlbGFuY2VyCiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgcmVjZWl2ZXI9c2VsZi5mcmVlbGFuY2VyX2FkZHJlc3MudmFsdWUubmF0aXZlLAogICAgLy8gICAgIGFtb3VudD1zZWxmLmVzY3Jvd19hbW91bnQudmFsdWUubmF0aXZlLAogICAgLy8gICAgIGZlZT1VSW50NjQoMCkgICMgQ292ZXJlZCBieSBvdXRlciB0cmFuc2FjdGlvbiBmZWUKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvX2ZyZWVsYW5jZS9jb250cmFjdC5weTo5MgogICAgLy8gcmVjZWl2ZXI9c2VsZi5mcmVlbGFuY2VyX2FkZHJlc3MudmFsdWUubmF0aXZlLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gImZyZWVsYW5jZXJfYWRkcmVzcyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5mcmVlbGFuY2VyX2FkZHJlc3MgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6OTMKICAgIC8vIGFtb3VudD1zZWxmLmVzY3Jvd19hbW91bnQudmFsdWUubmF0aXZlLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gImVzY3Jvd19hbW91bnQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZXNjcm93X2Ftb3VudCBleGlzdHMKICAgIGJ0b2kKICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICBkdXAKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvX2ZyZWVsYW5jZS9jb250cmFjdC5weTo4OS05MQogICAgLy8gIyAtLS0gUFJEIMKnNi4yIENvcmUgSW5ub3ZhdGlvbjogR3JvdXBlZCBJbm5lciBUcmFuc2FjdGlvbnMgLS0tCiAgICAvLyAjIDEuIFBheW1lbnQgdG8gRnJlZWxhbmNlcgogICAgLy8gaXR4bi5QYXltZW50KAogICAgaW50Y18xIC8vIHBheQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5Ojk0CiAgICAvLyBmZWU9VUludDY0KDApICAjIENvdmVyZWQgYnkgb3V0ZXIgdHJhbnNhY3Rpb24gZmVlCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvX2ZyZWVsYW5jZS9jb250cmFjdC5weTo4OS05NQogICAgLy8gIyAtLS0gUFJEIMKnNi4yIENvcmUgSW5ub3ZhdGlvbjogR3JvdXBlZCBJbm5lciBUcmFuc2FjdGlvbnMgLS0tCiAgICAvLyAjIDEuIFBheW1lbnQgdG8gRnJlZWxhbmNlcgogICAgLy8gaXR4bi5QYXltZW50KAogICAgLy8gICAgIHJlY2VpdmVyPXNlbGYuZnJlZWxhbmNlcl9hZGRyZXNzLnZhbHVlLm5hdGl2ZSwKICAgIC8vICAgICBhbW91bnQ9c2VsZi5lc2Nyb3dfYW1vdW50LnZhbHVlLm5hdGl2ZSwKICAgIC8vICAgICBmZWU9VUludDY0KDApICAjIENvdmVyZWQgYnkgb3V0ZXIgdHJhbnNhY3Rpb24gZmVlCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5Ojk3LTk5CiAgICAvLyAjIDIuIE1pbnQgUE9XIE5GVAogICAgLy8gIyBHZXQgbmF0aXZlIHN0cmluZyBmcm9tIGFyYzQuU3RyaW5nIGZvciBjb25jYXRlbmF0aW9uCiAgICAvLyBqb2JfdGl0bGVfYnl0ZXMgPSBzZWxmLmpvYl90aXRsZS52YWx1ZS5uYXRpdmUuYnl0ZXMKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA1IC8vICJqb2JfdGl0bGUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuam9iX3RpdGxlIGV4aXN0cwogICAgZXh0cmFjdCAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvX2ZyZWVsYW5jZS9jb250cmFjdC5weToxMDAKICAgIC8vIHdvcmtfaGFzaF9ieXRlcyA9IHNlbGYud29ya19oYXNoLnZhbHVlLm5hdGl2ZS5ieXRlcwogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDQgLy8gIndvcmtfaGFzaCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi53b3JrX2hhc2ggZXhpc3RzCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjEwMi0xMTIKICAgIC8vIG5mdF9jcmVhdGlvbiA9IGl0eG4uQXNzZXRDb25maWcoCiAgICAvLyAgICAgdG90YWw9VUludDY0KDEpLAogICAgLy8gICAgIGRlY2ltYWxzPVVJbnQ2NCgwKSwKICAgIC8vICAgICBhc3NldF9uYW1lPW9wLmNvbmNhdChCeXRlcyhiIkFsZ29GcmVlbGFuY2U6ICIpLCBqb2JfdGl0bGVfYnl0ZXMpLAogICAgLy8gICAgIHVuaXRfbmFtZT1CeXRlcyhiIlBPV0NFUlQiKSwKICAgIC8vICAgICB1cmw9b3AuY29uY2F0KEJ5dGVzKGIiaXBmczovLyIpLCB3b3JrX2hhc2hfYnl0ZXMpLCAgIyBBZGQgaXBmczovLyBwcmVmaXggZm9yIHN0YW5kYXJkIGNvbXBsaWFuY2UKICAgIC8vICAgICBtYW5hZ2VyPUFjY291bnQoKSwKICAgIC8vICAgICByZXNlcnZlPUFjY291bnQoKSwKICAgIC8vICAgICBmcmVlemU9QWNjb3VudCgpLAogICAgLy8gICAgIGNsYXdiYWNrPUFjY291bnQoKSwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvX2ZyZWVsYW5jZS9jb250cmFjdC5weToxMDUKICAgIC8vIGFzc2V0X25hbWU9b3AuY29uY2F0KEJ5dGVzKGIiQWxnb0ZyZWVsYW5jZTogIiksIGpvYl90aXRsZV9ieXRlcyksCiAgICBwdXNoYnl0ZXMgMHg0MTZjNjc2ZjQ2NzI2NTY1NmM2MTZlNjM2NTNhMjAKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6MTA3CiAgICAvLyB1cmw9b3AuY29uY2F0KEJ5dGVzKGIiaXBmczovLyIpLCB3b3JrX2hhc2hfYnl0ZXMpLCAgIyBBZGQgaXBmczovLyBwcmVmaXggZm9yIHN0YW5kYXJkIGNvbXBsaWFuY2UKICAgIHB1c2hieXRlcyAweDY5NzA2NjczM2EyZjJmCiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjEwOAogICAgLy8gbWFuYWdlcj1BY2NvdW50KCksCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvX2ZyZWVsYW5jZS9jb250cmFjdC5weToxMDktMTExCiAgICAvLyByZXNlcnZlPUFjY291bnQoKSwKICAgIC8vIGZyZWV6ZT1BY2NvdW50KCksCiAgICAvLyBjbGF3YmFjaz1BY2NvdW50KCksCiAgICBkdXBuIDMKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRDbGF3YmFjawogICAgaXR4bl9maWVsZCBDb25maWdBc3NldEZyZWV6ZQogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFJlc2VydmUKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRNYW5hZ2VyCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VVJMCiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6MTA2CiAgICAvLyB1bml0X25hbWU9Qnl0ZXMoYiJQT1dDRVJUIiksCiAgICBwdXNoYnl0ZXMgMHg1MDRmNTc0MzQ1NTI1NAogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFVuaXROYW1lCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TmFtZQogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjEwNAogICAgLy8gZGVjaW1hbHM9VUludDY0KDApLAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXREZWNpbWFscwogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjEwMwogICAgLy8gdG90YWw9VUludDY0KDEpLAogICAgaW50Y18xIC8vIDEKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRUb3RhbAogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjEwMgogICAgLy8gbmZ0X2NyZWF0aW9uID0gaXR4bi5Bc3NldENvbmZpZygKICAgIHB1c2hpbnQgMyAvLyBhY2ZnCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvX2ZyZWVsYW5jZS9jb250cmFjdC5weToxMDItMTEyCiAgICAvLyBuZnRfY3JlYXRpb24gPSBpdHhuLkFzc2V0Q29uZmlnKAogICAgLy8gICAgIHRvdGFsPVVJbnQ2NCgxKSwKICAgIC8vICAgICBkZWNpbWFscz1VSW50NjQoMCksCiAgICAvLyAgICAgYXNzZXRfbmFtZT1vcC5jb25jYXQoQnl0ZXMoYiJBbGdvRnJlZWxhbmNlOiAiKSwgam9iX3RpdGxlX2J5dGVzKSwKICAgIC8vICAgICB1bml0X25hbWU9Qnl0ZXMoYiJQT1dDRVJUIiksCiAgICAvLyAgICAgdXJsPW9wLmNvbmNhdChCeXRlcyhiImlwZnM6Ly8iKSwgd29ya19oYXNoX2J5dGVzKSwgICMgQWRkIGlwZnM6Ly8gcHJlZml4IGZvciBzdGFuZGFyZCBjb21wbGlhbmNlCiAgICAvLyAgICAgbWFuYWdlcj1BY2NvdW50KCksCiAgICAvLyAgICAgcmVzZXJ2ZT1BY2NvdW50KCksCiAgICAvLyAgICAgZnJlZXplPUFjY291bnQoKSwKICAgIC8vICAgICBjbGF3YmFjaz1BY2NvdW50KCksCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBDcmVhdGVkQXNzZXRJRAogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjExNC0xMjAKICAgIC8vICMgMy4gVHJhbnNmZXIgTkZUIHRvIEZyZWVsYW5jZXIKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PW5mdF9jcmVhdGlvbi5jcmVhdGVkX2Fzc2V0LAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPXNlbGYuZnJlZWxhbmNlcl9hZGRyZXNzLnZhbHVlLm5hdGl2ZSwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9VUludDY0KDEpLAogICAgLy8gICAgIGZlZT1VSW50NjQoMCkgICMgQ292ZXJlZCBieSBvdXRlciB0cmFuc2FjdGlvbiBmZWUKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvX2ZyZWVsYW5jZS9jb250cmFjdC5weToxMTgKICAgIC8vIGFzc2V0X2Ftb3VudD1VSW50NjQoMSksCiAgICBpbnRjXzEgLy8gMQogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgaXR4bl9maWVsZCBYZmVyQXNzZXQKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjExNC0xMTUKICAgIC8vICMgMy4gVHJhbnNmZXIgTkZUIHRvIEZyZWVsYW5jZXIKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIHB1c2hpbnQgNCAvLyBheGZlcgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjExOQogICAgLy8gZmVlPVVJbnQ2NCgwKSAgIyBDb3ZlcmVkIGJ5IG91dGVyIHRyYW5zYWN0aW9uIGZlZQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6MTE0LTEyMAogICAgLy8gIyAzLiBUcmFuc2ZlciBORlQgdG8gRnJlZWxhbmNlcgogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIHhmZXJfYXNzZXQ9bmZ0X2NyZWF0aW9uLmNyZWF0ZWRfYXNzZXQsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9c2VsZi5mcmVlbGFuY2VyX2FkZHJlc3MudmFsdWUubmF0aXZlLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD1VSW50NjQoMSksCiAgICAvLyAgICAgZmVlPVVJbnQ2NCgwKSAgIyBDb3ZlcmVkIGJ5IG91dGVyIHRyYW5zYWN0aW9uIGZlZQogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvX2ZyZWVsYW5jZS9jb250cmFjdC5weToxMjIKICAgIC8vIHNlbGYuam9iX3N0YXR1cy52YWx1ZSA9IGFyYzQuVUludDY0KDMpICAjIFN0YXR1czogQ29tcGxldGVkCiAgICBieXRlY18wIC8vICJqb2Jfc3RhdHVzIgogICAgcHVzaGJ5dGVzIDB4MDAwMDAwMDAwMDAwMDAwMwogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvX2ZyZWVsYW5jZS9jb250cmFjdC5weTo4MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzLmFsZ29fZnJlZWxhbmNlLmNvbnRyYWN0LkFsZ29GcmVlbGFuY2UuY2FuY2VsW3JvdXRpbmddKCkgLT4gdm9pZDoKY2FuY2VsOgogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjEyNi0xMjcKICAgIC8vICMgQWxsb3dzIGNsaWVudCB0byBjYW5jZWwgYmVmb3JlIHdvcmsgaXMgc3VibWl0dGVkIGFuZCByZXRyaWV2ZSBmdW5kcy4KICAgIC8vIGFzc2VydCBzZWxmLmpvYl9zdGF0dXMudmFsdWUubmF0aXZlIDwgVUludDY0KDIpLCAiSm9iIGNhbm5vdCBiZSBjYW5jZWxlZCBhZnRlciB3b3JrIGhhcyBiZWVuIHN1Ym1pdHRlZCIgICMgU3RhdHVzIDAgb3IgMQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gImpvYl9zdGF0dXMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuam9iX3N0YXR1cyBleGlzdHMKICAgIGJ0b2kKICAgIGludGNfMiAvLyAyCiAgICA8CiAgICBhc3NlcnQgLy8gSm9iIGNhbm5vdCBiZSBjYW5jZWxlZCBhZnRlciB3b3JrIGhhcyBiZWVuIHN1Ym1pdHRlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjEyOAogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5jbGllbnRfYWRkcmVzcy52YWx1ZS5uYXRpdmUsICJPbmx5IGNsaWVudCBjYW4gY2FuY2VsIgogICAgdHhuIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gImNsaWVudF9hZGRyZXNzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNsaWVudF9hZGRyZXNzIGV4aXN0cwogICAgc3dhcAogICAgZGlnIDEKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBjbGllbnQgY2FuIGNhbmNlbAogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjEzMC0xMzUKICAgIC8vICMgUmVmdW5kIHRoZSBjbGllbnQsIGxlYXZpbmcgdGhlIG1pbmltdW0gYmFsYW5jZSB0byBrZWVwIHRoZSBhY2NvdW50IG9wZW4uCiAgICAvLyAjIEEgc2VwYXJhdGUgImRlbGV0ZSIgbWV0aG9kIHdvdWxkIGJlIG5lZWRlZCB0byBjbG9zZSB0aGUgYWNjb3VudCBlbnRpcmVseS4KICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIC8vICAgICByZWNlaXZlcj1zZWxmLmNsaWVudF9hZGRyZXNzLnZhbHVlLm5hdGl2ZSwKICAgIC8vICAgICBhbW91bnQ9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcy5iYWxhbmNlIC0gR2xvYmFsLm1pbl9iYWxhbmNlLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjEzNAogICAgLy8gYW1vdW50PUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MuYmFsYW5jZSAtIEdsb2JhbC5taW5fYmFsYW5jZSwKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgZ2xvYmFsIE1pbkJhbGFuY2UKICAgIC0KICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6MTMwLTEzMgogICAgLy8gIyBSZWZ1bmQgdGhlIGNsaWVudCwgbGVhdmluZyB0aGUgbWluaW11bSBiYWxhbmNlIHRvIGtlZXAgdGhlIGFjY291bnQgb3Blbi4KICAgIC8vICMgQSBzZXBhcmF0ZSAiZGVsZXRlIiBtZXRob2Qgd291bGQgYmUgbmVlZGVkIHRvIGNsb3NlIHRoZSBhY2NvdW50IGVudGlyZWx5LgogICAgLy8gaXR4bi5QYXltZW50KAogICAgaW50Y18xIC8vIHBheQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6MTMwLTEzNQogICAgLy8gIyBSZWZ1bmQgdGhlIGNsaWVudCwgbGVhdmluZyB0aGUgbWluaW11bSBiYWxhbmNlIHRvIGtlZXAgdGhlIGFjY291bnQgb3Blbi4KICAgIC8vICMgQSBzZXBhcmF0ZSAiZGVsZXRlIiBtZXRob2Qgd291bGQgYmUgbmVlZGVkIHRvIGNsb3NlIHRoZSBhY2NvdW50IGVudGlyZWx5LgogICAgLy8gaXR4bi5QYXltZW50KAogICAgLy8gICAgIHJlY2VpdmVyPXNlbGYuY2xpZW50X2FkZHJlc3MudmFsdWUubmF0aXZlLAogICAgLy8gICAgIGFtb3VudD1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLmJhbGFuY2UgLSBHbG9iYWwubWluX2JhbGFuY2UsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjEzNwogICAgLy8gc2VsZi5qb2Jfc3RhdHVzLnZhbHVlID0gYXJjNC5VSW50NjQoNCkgICMgU3RhdHVzOiBDYW5jZWxlZAogICAgYnl0ZWNfMCAvLyAiam9iX3N0YXR1cyIKICAgIHB1c2hieXRlcyAweDAwMDAwMDAwMDAwMDAwMDQKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6MTI0CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMuYWxnb19mcmVlbGFuY2UuY29udHJhY3QuQWxnb0ZyZWVsYW5jZS5nZXRfam9iX2RldGFpbHNbcm91dGluZ10oKSAtPiB2b2lkOgpnZXRfam9iX2RldGFpbHM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6MTQzCiAgICAvLyBjbGllbnRfYWRkcmVzcz1zZWxmLmNsaWVudF9hZGRyZXNzLnZhbHVlLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gImNsaWVudF9hZGRyZXNzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNsaWVudF9hZGRyZXNzIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjE0NAogICAgLy8gZnJlZWxhbmNlcl9hZGRyZXNzPXNlbGYuZnJlZWxhbmNlcl9hZGRyZXNzLnZhbHVlLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gImZyZWVsYW5jZXJfYWRkcmVzcyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5mcmVlbGFuY2VyX2FkZHJlc3MgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6MTQ1CiAgICAvLyBlc2Nyb3dfYW1vdW50PXNlbGYuZXNjcm93X2Ftb3VudC52YWx1ZSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJlc2Nyb3dfYW1vdW50IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmVzY3Jvd19hbW91bnQgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6MTQ2CiAgICAvLyBqb2Jfc3RhdHVzPXNlbGYuam9iX3N0YXR1cy52YWx1ZSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJqb2Jfc3RhdHVzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmpvYl9zdGF0dXMgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb19mcmVlbGFuY2UvY29udHJhY3QucHk6MTQ3CiAgICAvLyB3b3JrX2hhc2g9c2VsZi53b3JrX2hhc2gudmFsdWUsCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNCAvLyAid29ya19oYXNoIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLndvcmtfaGFzaCBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvX2ZyZWVsYW5jZS9jb250cmFjdC5weToxNDgKICAgIC8vIGpvYl90aXRsZT1zZWxmLmpvYl90aXRsZS52YWx1ZSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA1IC8vICJqb2JfdGl0bGUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuam9iX3RpdGxlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjE0OQogICAgLy8gY3JlYXRlZF9hdD1zZWxmLmNyZWF0ZWRfYXQudmFsdWUsCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNiAvLyAiY3JlYXRlZF9hdCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5jcmVhdGVkX2F0IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjE1MAogICAgLy8gYXBwX2lkPWFyYzQuVUludDY0KEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2lkLmlkKSwKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25JRAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29fZnJlZWxhbmNlL2NvbnRyYWN0LnB5OjEzOQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB1bmNvdmVyIDcKICAgIHVuY292ZXIgNwogICAgY29uY2F0CiAgICB1bmNvdmVyIDYKICAgIGNvbmNhdAogICAgdW5jb3ZlciA1CiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAweDAwNjQKICAgIGNvbmNhdAogICAgZGlnIDQKICAgIGxlbgogICAgcHVzaGludCAxMDAgLy8gMTAwCiAgICArCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4K",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAECICYKCmpvYl9zdGF0dXMOY2xpZW50X2FkZHJlc3MSZnJlZWxhbmNlcl9hZGRyZXNzDWVzY3Jvd19hbW91bnQJd29ya19oYXNoCWpvYl90aXRsZQpjcmVhdGVkX2F0CAAAAAAAAAAACAAAAAAAAAABCAAAAAAAAAACMRtBADkxGRREMRhEggYEiQYysQTpiSvvBOAx2nAEQMMGfwQx8mqbBNDmPwE2GgCOBgAJAF8AkQDSAXIBpwAxGRQxGBQQQzYaAUkVJRJENhoCSRUlEkQ2GgNJFYEIEkQ2GgRJIlkkCEsBFRJEMQAyCRJEIhZLAqREKU8EZypPA2crTwJnJwVMZzIHFicGTGcoJwdnJwSAAgAAZyNDIihlRCcHqEQxACIpZUQSRDIEJBJEIzgQIxJEIzgHMgoSRCM4CCIrZUQXEkQoJwhnI0M2GgFHAiJZJAhMFUlOAklPAhJEIihlRCcIqEQxACIqZUQSRIEuD0EAFEmBOw5BAA0jRCcESwJnKCcJZyNDIkL/8CIoZUQnCahEMQAiKWVEEkSxIiplRCIrZUQXsghJsgcjshAisgGzIicFZURXAgAiJwRlRFcCALGAD0FsZ29GcmVlbGFuY2U6IE8CUIAHaXBmczovL08CUDIDRwOyLLIrsiqyKbIngAdQT1dDRVJUsiWyJiKyIyOyIoEDshAisgGztDyxI7ISshGyFIEEshAisgGzKIAIAAAAAAAAAANnI0MiKGVEFyQMRDEAIillRExLARJEsTIKcwBEMgEJsgiyByOyECKyAbMogAgAAAAAAAAABGcjQyIpZUQiKmVEIitlRCIoZUQiJwRlRCInBWVEIicGZUQyCBZPB08HUE8GUE8FUIACAGRQSwQVgWQIFlcGAlBPAlBMUE8CUExQgAQVH3x1TFCwI0M=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}