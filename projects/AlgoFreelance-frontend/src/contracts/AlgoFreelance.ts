/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AlgoFreelance","structs":{"JobDetails":[{"name":"clientAddress","type":"address"},{"name":"freelancerAddress","type":"address"},{"name":"escrowAmount","type":"uint64"},{"name":"jobStatus","type":"uint64"},{"name":"workHash","type":"string"},{"name":"jobTitle","type":"string"},{"name":"createdAt","type":"uint64"},{"name":"appId","type":"uint64"}]},"methods":[{"name":"initialize","args":[{"type":"address","name":"client_address"},{"type":"address","name":"freelancer_address"},{"type":"uint64","name":"escrow_amount"},{"type":"string","name":"job_title"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"fund","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"submit_work","args":[{"type":"string","name":"ipfs_hash"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"approve_work","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"cancel","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"get_job_details","args":[],"returns":{"type":"(address,address,uint64,uint64,string,string,uint64,uint64)","struct":"JobDetails"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":7},"local":{"ints":0,"bytes":0}},"keys":{"global":{"client_address":{"keyType":"AVMString","valueType":"address","key":"Y2xpZW50X2FkZHJlc3M="},"freelancer_address":{"keyType":"AVMString","valueType":"address","key":"ZnJlZWxhbmNlcl9hZGRyZXNz"},"escrow_amount":{"keyType":"AVMString","valueType":"uint64","key":"ZXNjcm93X2Ftb3VudA=="},"job_status":{"keyType":"AVMString","valueType":"uint64","key":"am9iX3N0YXR1cw=="},"work_hash":{"keyType":"AVMString","valueType":"string","key":"d29ya19oYXNo"},"job_title":{"keyType":"AVMString","valueType":"string","key":"am9iX3RpdGxl"},"created_at":{"keyType":"AVMString","valueType":"uint64","key":"Y3JlYXRlZF9hdA=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[245],"errorMessage":"Escrow amount must be greater than 0"},{"pc":[381],"errorMessage":"Invalid IPFS hash length"},{"pc":[564],"errorMessage":"Job cannot be canceled after work has been submitted"},{"pc":[289],"errorMessage":"Job not in Created status"},{"pc":[358],"errorMessage":"Job not in Funded status"},{"pc":[404],"errorMessage":"Job not in Submitted status"},{"pc":[302],"errorMessage":"Must be grouped with a payment transaction"},{"pc":[134],"errorMessage":"OnCompletion must be NoOp"},{"pc":[195],"errorMessage":"OnCompletion must be NoOp && can only call when creating"},{"pc":[412],"errorMessage":"Only client can approve work"},{"pc":[575],"errorMessage":"Only client can cancel"},{"pc":[297],"errorMessage":"Only client can fund"},{"pc":[366],"errorMessage":"Only freelancer can submit work"},{"pc":[239],"errorMessage":"Only the creator can initialize the contract"},{"pc":[325],"errorMessage":"Payment amount must match escrow amount"},{"pc":[315],"errorMessage":"Payment must be to the contract"},{"pc":[581],"errorMessage":"account funded"},{"pc":[295,410,570,613],"errorMessage":"check self.client_address exists"},{"pc":[640],"errorMessage":"check self.created_at exists"},{"pc":[322,421,621],"errorMessage":"check self.escrow_amount exists"},{"pc":[364,417,617],"errorMessage":"check self.freelancer_address exists"},{"pc":[285,354,400,560,625],"errorMessage":"check self.job_status exists"},{"pc":[439,635],"errorMessage":"check self.job_title exists"},{"pc":[447,630],"errorMessage":"check self.work_hash exists"},{"pc":[233,350],"errorMessage":"invalid number of bytes for (len+utf8[])"},{"pc":[220],"errorMessage":"invalid number of bytes for uint64"},{"pc":[203,211],"errorMessage":"invalid number of bytes for uint8[32]"},{"pc":[308],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CyAEAAECICYKCmpvYl9zdGF0dXMOY2xpZW50X2FkZHJlc3MSZnJlZWxhbmNlcl9hZGRyZXNzDWVzY3Jvd19hbW91bnQJd29ya19oYXNoCWpvYl90aXRsZQpjcmVhdGVkX2F0CAAAAAAAAAAACAAAAAAAAAABCAAAAAAAAAACMRtBADkxGRREMRhEggYEiQYysQTpiSvvBOAx2nAEQMMGfwQx8mqbBNDmPwE2GgCOBgAJAF8AkQDSAXIBpwAxGRQxGBQQQzYaAUkVJRJENhoCSRUlEkQ2GgNJFYEIEkQ2GgRJIlkkCEsBFRJEMQAyCRJEIhZLAqREKU8EZypPA2crTwJnJwVMZzIHFicGTGcoJwdnJwSAAgAAZyNDIihlRCcHqEQxACIpZUQSRDIEJBJEIzgQIxJEIzgHMgoSRCM4CCIrZUQXEkQoJwhnI0M2GgFHAiJZJAhMFUlOAklPAhJEIihlRCcIqEQxACIqZUQSRIEuD0EAFEmBOw5BAA0jRCcESwJnKCcJZyNDIkL/8CIoZUQnCahEMQAiKWVEEkSxIiplRCIrZUQXsghJsgcjshAisgGzIicFZURXAgAiJwRlRFcCALGAD0FsZ29GcmVlbGFuY2U6IE8CUIAHaXBmczovL08CUDIDRwOyLLIrsiqyKbIngAdQT1dDRVJUsiWyJiKyIyOyIoEDshAisgGztDyxI7ISshGyFIEEshAisgGzKIAIAAAAAAAAAANnI0MiKGVEFyQMRDEAIillRExLARJEsTIKcwBEMgEJsgiyByOyECKyAbMogAgAAAAAAAAABGcjQyIpZUQiKmVEIitlRCIoZUQiJwRlRCInBWVEIicGZUQyCBZPB08HUE8GUE8FUIACAGRQSwQVgWQIFlcGAlBPAlBMUE8CUExQgAQVH3x1TFCwI0M=","clear":"C4EBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":5,"minor":2,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type JobDetails = {
  clientAddress: string,
  freelancerAddress: string,
  escrowAmount: bigint,
  jobStatus: bigint,
  workHash: string,
  jobTitle: string,
  createdAt: bigint,
  appId: bigint
}


/**
 * Converts the ABI tuple representation of a JobDetails to the struct representation
 */
export function JobDetailsFromTuple(abiTuple: [string, string, bigint, bigint, string, string, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.JobDetails, APP_SPEC.structs) as JobDetails
}

/**
 * The argument types for the AlgoFreelance contract
 */
export type AlgoFreelanceArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'initialize(address,address,uint64,string)void': {
      clientAddress: string
      freelancerAddress: string
      escrowAmount: bigint | number
      jobTitle: string
    }
    'fund()void': Record<string, never>
    'submit_work(string)void': {
      ipfsHash: string
    }
    'approve_work()void': Record<string, never>
    'cancel()void': Record<string, never>
    'get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'initialize(address,address,uint64,string)void': [clientAddress: string, freelancerAddress: string, escrowAmount: bigint | number, jobTitle: string]
    'fund()void': []
    'submit_work(string)void': [ipfsHash: string]
    'approve_work()void': []
    'cancel()void': []
    'get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)': []
  }
}

/**
 * The return type for each method
 */
export type AlgoFreelanceReturns = {
  'initialize(address,address,uint64,string)void': void
  'fund()void': void
  'submit_work(string)void': void
  'approve_work()void': void
  'cancel()void': void
  'get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)': JobDetails
}

/**
 * Defines the types of available calls and state of the AlgoFreelance smart contract.
 */
export type AlgoFreelanceTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialize(address,address,uint64,string)void' | 'initialize', {
      argsObj: AlgoFreelanceArgs['obj']['initialize(address,address,uint64,string)void']
      argsTuple: AlgoFreelanceArgs['tuple']['initialize(address,address,uint64,string)void']
      returns: AlgoFreelanceReturns['initialize(address,address,uint64,string)void']
    }>
    & Record<'fund()void' | 'fund', {
      argsObj: AlgoFreelanceArgs['obj']['fund()void']
      argsTuple: AlgoFreelanceArgs['tuple']['fund()void']
      returns: AlgoFreelanceReturns['fund()void']
    }>
    & Record<'submit_work(string)void' | 'submit_work', {
      argsObj: AlgoFreelanceArgs['obj']['submit_work(string)void']
      argsTuple: AlgoFreelanceArgs['tuple']['submit_work(string)void']
      returns: AlgoFreelanceReturns['submit_work(string)void']
    }>
    & Record<'approve_work()void' | 'approve_work', {
      argsObj: AlgoFreelanceArgs['obj']['approve_work()void']
      argsTuple: AlgoFreelanceArgs['tuple']['approve_work()void']
      returns: AlgoFreelanceReturns['approve_work()void']
    }>
    & Record<'cancel()void' | 'cancel', {
      argsObj: AlgoFreelanceArgs['obj']['cancel()void']
      argsTuple: AlgoFreelanceArgs['tuple']['cancel()void']
      returns: AlgoFreelanceReturns['cancel()void']
    }>
    & Record<'get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)' | 'get_job_details', {
      argsObj: AlgoFreelanceArgs['obj']['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)']
      argsTuple: AlgoFreelanceArgs['tuple']['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)']
      returns: AlgoFreelanceReturns['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        clientAddress: string
        freelancerAddress: string
        escrowAmount: bigint
        jobStatus: bigint
        workHash: string
        jobTitle: string
        createdAt: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AlgoFreelanceSignatures = keyof AlgoFreelanceTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AlgoFreelanceNonVoidMethodSignatures = keyof AlgoFreelanceTypes['methods'] extends infer T ? T extends keyof AlgoFreelanceTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AlgoFreelance smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AlgoFreelanceSignatures> = AlgoFreelanceTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AlgoFreelance smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AlgoFreelanceSignatures> = AlgoFreelanceTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AlgoFreelanceTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AlgoFreelanceCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AlgoFreelanceDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AlgoFreelanceCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AlgoFreelance smart contract
 */
export abstract class AlgoFreelanceParamsFactory {
  /**
   * Constructs a no op call for the initialize(address,address,uint64,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<AlgoFreelanceArgs['obj']['initialize(address,address,uint64,string)void'] | AlgoFreelanceArgs['tuple']['initialize(address,address,uint64,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize(address,address,uint64,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.clientAddress, params.args.freelancerAddress, params.args.escrowAmount, params.args.jobTitle],
    }
  }
  /**
   * Constructs a no op call for the fund()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static fund(params: CallParams<AlgoFreelanceArgs['obj']['fund()void'] | AlgoFreelanceArgs['tuple']['fund()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'fund()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the submit_work(string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static submitWork(params: CallParams<AlgoFreelanceArgs['obj']['submit_work(string)void'] | AlgoFreelanceArgs['tuple']['submit_work(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'submit_work(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.ipfsHash],
    }
  }
  /**
   * Constructs a no op call for the approve_work()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static approveWork(params: CallParams<AlgoFreelanceArgs['obj']['approve_work()void'] | AlgoFreelanceArgs['tuple']['approve_work()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'approve_work()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the cancel()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static cancel(params: CallParams<AlgoFreelanceArgs['obj']['cancel()void'] | AlgoFreelanceArgs['tuple']['cancel()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'cancel()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getJobDetails(params: CallParams<AlgoFreelanceArgs['obj']['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)'] | AlgoFreelanceArgs['tuple']['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AlgoFreelance smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AlgoFreelanceFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AlgoFreelanceFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AlgoFreelanceClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AlgoFreelanceClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AlgoFreelance smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AlgoFreelanceDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new AlgoFreelanceClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AlgoFreelance smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AlgoFreelance smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AlgoFreelance smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new AlgoFreelanceClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AlgoFreelance smart contract
 */
export class AlgoFreelanceClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AlgoFreelanceClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AlgoFreelance app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AlgoFreelanceClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AlgoFreelanceNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AlgoFreelanceClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AlgoFreelanceClient> {
    return new AlgoFreelanceClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AlgoFreelanceClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AlgoFreelanceClient> {
    return new AlgoFreelanceClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AlgoFreelance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AlgoFreelance smart contract using the `initialize(address,address,uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<AlgoFreelanceArgs['obj']['initialize(address,address,uint64,string)void'] | AlgoFreelanceArgs['tuple']['initialize(address,address,uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoFreelanceParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the AlgoFreelance smart contract using the `fund()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    fund: (params: CallParams<AlgoFreelanceArgs['obj']['fund()void'] | AlgoFreelanceArgs['tuple']['fund()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoFreelanceParamsFactory.fund(params))
    },

    /**
     * Makes a call to the AlgoFreelance smart contract using the `submit_work(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    submitWork: (params: CallParams<AlgoFreelanceArgs['obj']['submit_work(string)void'] | AlgoFreelanceArgs['tuple']['submit_work(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoFreelanceParamsFactory.submitWork(params))
    },

    /**
     * Makes a call to the AlgoFreelance smart contract using the `approve_work()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    approveWork: (params: CallParams<AlgoFreelanceArgs['obj']['approve_work()void'] | AlgoFreelanceArgs['tuple']['approve_work()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoFreelanceParamsFactory.approveWork(params))
    },

    /**
     * Makes a call to the AlgoFreelance smart contract using the `cancel()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    cancel: (params: CallParams<AlgoFreelanceArgs['obj']['cancel()void'] | AlgoFreelanceArgs['tuple']['cancel()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoFreelanceParamsFactory.cancel(params))
    },

    /**
     * Makes a call to the AlgoFreelance smart contract using the `get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getJobDetails: (params: CallParams<AlgoFreelanceArgs['obj']['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)'] | AlgoFreelanceArgs['tuple']['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoFreelanceParamsFactory.getJobDetails(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AlgoFreelance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AlgoFreelance smart contract using the `initialize(address,address,uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<AlgoFreelanceArgs['obj']['initialize(address,address,uint64,string)void'] | AlgoFreelanceArgs['tuple']['initialize(address,address,uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoFreelanceParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the AlgoFreelance smart contract using the `fund()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    fund: (params: CallParams<AlgoFreelanceArgs['obj']['fund()void'] | AlgoFreelanceArgs['tuple']['fund()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoFreelanceParamsFactory.fund(params))
    },

    /**
     * Makes a call to the AlgoFreelance smart contract using the `submit_work(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    submitWork: (params: CallParams<AlgoFreelanceArgs['obj']['submit_work(string)void'] | AlgoFreelanceArgs['tuple']['submit_work(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoFreelanceParamsFactory.submitWork(params))
    },

    /**
     * Makes a call to the AlgoFreelance smart contract using the `approve_work()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    approveWork: (params: CallParams<AlgoFreelanceArgs['obj']['approve_work()void'] | AlgoFreelanceArgs['tuple']['approve_work()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoFreelanceParamsFactory.approveWork(params))
    },

    /**
     * Makes a call to the AlgoFreelance smart contract using the `cancel()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    cancel: (params: CallParams<AlgoFreelanceArgs['obj']['cancel()void'] | AlgoFreelanceArgs['tuple']['cancel()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoFreelanceParamsFactory.cancel(params))
    },

    /**
     * Makes a call to the AlgoFreelance smart contract using the `get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getJobDetails: (params: CallParams<AlgoFreelanceArgs['obj']['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)'] | AlgoFreelanceArgs['tuple']['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoFreelanceParamsFactory.getJobDetails(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AlgoFreelance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AlgoFreelance smart contract using the `initialize(address,address,uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<AlgoFreelanceArgs['obj']['initialize(address,address,uint64,string)void'] | AlgoFreelanceArgs['tuple']['initialize(address,address,uint64,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoFreelanceParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | AlgoFreelanceReturns['initialize(address,address,uint64,string)void'])}
    },

    /**
     * Makes a call to the AlgoFreelance smart contract using the `fund()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    fund: async (params: CallParams<AlgoFreelanceArgs['obj']['fund()void'] | AlgoFreelanceArgs['tuple']['fund()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoFreelanceParamsFactory.fund(params))
      return {...result, return: result.return as unknown as (undefined | AlgoFreelanceReturns['fund()void'])}
    },

    /**
     * Makes a call to the AlgoFreelance smart contract using the `submit_work(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    submitWork: async (params: CallParams<AlgoFreelanceArgs['obj']['submit_work(string)void'] | AlgoFreelanceArgs['tuple']['submit_work(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoFreelanceParamsFactory.submitWork(params))
      return {...result, return: result.return as unknown as (undefined | AlgoFreelanceReturns['submit_work(string)void'])}
    },

    /**
     * Makes a call to the AlgoFreelance smart contract using the `approve_work()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    approveWork: async (params: CallParams<AlgoFreelanceArgs['obj']['approve_work()void'] | AlgoFreelanceArgs['tuple']['approve_work()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoFreelanceParamsFactory.approveWork(params))
      return {...result, return: result.return as unknown as (undefined | AlgoFreelanceReturns['approve_work()void'])}
    },

    /**
     * Makes a call to the AlgoFreelance smart contract using the `cancel()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    cancel: async (params: CallParams<AlgoFreelanceArgs['obj']['cancel()void'] | AlgoFreelanceArgs['tuple']['cancel()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoFreelanceParamsFactory.cancel(params))
      return {...result, return: result.return as unknown as (undefined | AlgoFreelanceReturns['cancel()void'])}
    },

    /**
     * Makes a call to the AlgoFreelance smart contract using the `get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getJobDetails: async (params: CallParams<AlgoFreelanceArgs['obj']['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)'] | AlgoFreelanceArgs['tuple']['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoFreelanceParamsFactory.getJobDetails(params))
      return {...result, return: result.return as unknown as (undefined | AlgoFreelanceReturns['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AlgoFreelanceClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the AlgoFreelance smart contract using the `get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getJobDetails(params: CallParams<AlgoFreelanceArgs['obj']['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)'] | AlgoFreelanceArgs['tuple']['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(AlgoFreelanceParamsFactory.getJobDetails(params))
    return result.return as unknown as AlgoFreelanceReturns['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)']
  }

  /**
   * Methods to access state for the current AlgoFreelance app
   */
  state = {
    /**
     * Methods to access global state for the current AlgoFreelance app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          clientAddress: result.client_address,
          freelancerAddress: result.freelancer_address,
          escrowAmount: result.escrow_amount,
          jobStatus: result.job_status,
          workHash: result.work_hash,
          jobTitle: result.job_title,
          createdAt: result.created_at,
        }
      },
      /**
       * Get the current value of the client_address key in global state
       */
      clientAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("client_address")) as string | undefined },
      /**
       * Get the current value of the freelancer_address key in global state
       */
      freelancerAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("freelancer_address")) as string | undefined },
      /**
       * Get the current value of the escrow_amount key in global state
       */
      escrowAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("escrow_amount")) as bigint | undefined },
      /**
       * Get the current value of the job_status key in global state
       */
      jobStatus: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("job_status")) as bigint | undefined },
      /**
       * Get the current value of the work_hash key in global state
       */
      workHash: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("work_hash")) as string | undefined },
      /**
       * Get the current value of the job_title key in global state
       */
      jobTitle: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("job_title")) as string | undefined },
      /**
       * Get the current value of the created_at key in global state
       */
      createdAt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("created_at")) as bigint | undefined },
    },
  }

  public newGroup(): AlgoFreelanceComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initialize(address,address,uint64,string)void method call against the AlgoFreelance contract
       */
      initialize(params: CallParams<AlgoFreelanceArgs['obj']['initialize(address,address,uint64,string)void'] | AlgoFreelanceArgs['tuple']['initialize(address,address,uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a fund()void method call against the AlgoFreelance contract
       */
      fund(params: CallParams<AlgoFreelanceArgs['obj']['fund()void'] | AlgoFreelanceArgs['tuple']['fund()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.fund(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a submit_work(string)void method call against the AlgoFreelance contract
       */
      submitWork(params: CallParams<AlgoFreelanceArgs['obj']['submit_work(string)void'] | AlgoFreelanceArgs['tuple']['submit_work(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.submitWork(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a approve_work()void method call against the AlgoFreelance contract
       */
      approveWork(params: CallParams<AlgoFreelanceArgs['obj']['approve_work()void'] | AlgoFreelanceArgs['tuple']['approve_work()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.approveWork(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a cancel()void method call against the AlgoFreelance contract
       */
      cancel(params: CallParams<AlgoFreelanceArgs['obj']['cancel()void'] | AlgoFreelanceArgs['tuple']['cancel()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.cancel(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64) method call against the AlgoFreelance contract
       */
      getJobDetails(params: CallParams<AlgoFreelanceArgs['obj']['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)'] | AlgoFreelanceArgs['tuple']['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getJobDetails(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)', v))
        return this
      },
      /**
       * Add a clear state call to the AlgoFreelance contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AlgoFreelanceComposer
  }
}
export type AlgoFreelanceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialize(address,address,uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<AlgoFreelanceArgs['obj']['initialize(address,address,uint64,string)void'] | AlgoFreelanceArgs['tuple']['initialize(address,address,uint64,string)void']>): AlgoFreelanceComposer<[...TReturns, AlgoFreelanceReturns['initialize(address,address,uint64,string)void'] | undefined]>

  /**
   * Calls the fund()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fund(params?: CallParams<AlgoFreelanceArgs['obj']['fund()void'] | AlgoFreelanceArgs['tuple']['fund()void']>): AlgoFreelanceComposer<[...TReturns, AlgoFreelanceReturns['fund()void'] | undefined]>

  /**
   * Calls the submit_work(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  submitWork(params?: CallParams<AlgoFreelanceArgs['obj']['submit_work(string)void'] | AlgoFreelanceArgs['tuple']['submit_work(string)void']>): AlgoFreelanceComposer<[...TReturns, AlgoFreelanceReturns['submit_work(string)void'] | undefined]>

  /**
   * Calls the approve_work()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveWork(params?: CallParams<AlgoFreelanceArgs['obj']['approve_work()void'] | AlgoFreelanceArgs['tuple']['approve_work()void']>): AlgoFreelanceComposer<[...TReturns, AlgoFreelanceReturns['approve_work()void'] | undefined]>

  /**
   * Calls the cancel()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cancel(params?: CallParams<AlgoFreelanceArgs['obj']['cancel()void'] | AlgoFreelanceArgs['tuple']['cancel()void']>): AlgoFreelanceComposer<[...TReturns, AlgoFreelanceReturns['cancel()void'] | undefined]>

  /**
   * Calls the get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getJobDetails(params?: CallParams<AlgoFreelanceArgs['obj']['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)'] | AlgoFreelanceArgs['tuple']['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)']>): AlgoFreelanceComposer<[...TReturns, AlgoFreelanceReturns['get_job_details()(address,address,uint64,uint64,string,string,uint64,uint64)'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AlgoFreelance smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AlgoFreelanceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AlgoFreelanceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AlgoFreelanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AlgoFreelanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AlgoFreelanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AlgoFreelanceComposerResults<TReturns>>
}
export type AlgoFreelanceComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

